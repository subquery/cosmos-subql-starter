specVersion: 1.0.0
name: cronos-evm-starter-via-rpc
version: 0.0.1
runner:
  node:
    name: "@subql/node-cosmos"
    version: "*"
  query:
    name: "@subql/query"
    version: "*"
description: "This project can be use as a starting point for developing your Cosmos (Cronos) based SubQuery project via the Ethermint RPC API"
repository: "https://github.com/subquery/cosmos-subql-starter/tree/main/Cronos/cronos-evm-starter-via-rpc"
schema:
  file: ./schema.graphql
network:
  chainId: cronosmainnet_25-1
  # This endpoint must be a public non-pruned archive node
  # Public nodes may be rate limited, which can affect indexing speed
  # When developing your project we suggest getting a private API key
  # Take a look here for some Cronos endpoints https://moonflow.solutions/rpc-servers
  endpoint: "https://rpc.cronos.org/"
  # Optionally provide the HTTP endpoint of a full chain dictionary to speed up processing
  dictionary: "https://api.subquery.network/sq/subquery/cosmos-cronos-dictionary"
  chainTypes:
    ethermint.evm.v1:
      file: "./proto/ethermint/evm/v1/tx.proto"
      messages:
        - "MsgEthereumTx"
        - "LegacyTx"
        - "AccessListTx"
        - "DynamicFeeTx"
    ethermint.evm.v12:
      file: "./proto/ethermint/evm/v1/evm.proto"
      messages:
        - "AccessTuple"
    google.protobuf:
      file: "./proto/google/protobuf/any.proto"
      messages:
        - "Any"

dataSources:
  - kind: cosmos/EthermintEvm
    startBlock: 1474211
    processor:
      file: "./node_modules/@subql/ethermint-evm-processor/dist/bundle.js"
      options:
        abi: erc20
        address: "0x5c7f8a570d578ed84e63fdfa7b1ee72deae1ae23" # Wrapped CRO
    assets:
      erc20:
        file: "./erc20.abi.json"
    mapping:
      file: "./dist/index.js"
      handlers:
        # Using block handlers slows your project down as they can be executed with each and every block. Only use if you need to
        # - handler: handleBlock
        #   kind: cosmos/BlockHandler
        - handler: handleEthermintEvmEvent
          kind: cosmos/EthermintEvmEvent
          filter:
            topics:
              # The topics filter follows the Ethereum JSON-PRC log filters
              # https://docs.ethers.io/v5/concepts/events
              # Example valid values:
              # - '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
              # - Transfer(address,address,u256)
              # - Transfer(address from,address to,uint256 value)
              - Transfer(address indexed from, address indexed to, uint256 amount)
              - null
              - null
              - null
        - handler: handleEthermintEvmCall
          kind: cosmos/EthermintEvmCall
          filter:
            # Either Function Signature strings or the function `sighash` to filter the function called on the contract
            # ](https://docs.ethers.io/v5/api/utils/abi/fragments/#FunctionFragment)
            method: approve(address spender, uint256 rawAmount)
