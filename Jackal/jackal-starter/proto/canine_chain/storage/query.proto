syntax = "proto3";
package canine_chain.storage;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "canine_chain/storage/params.proto";
import "canine_chain/storage/active_deals.proto";
import "canine_chain/storage/providers.proto";
import "canine_chain/storage/payment_info.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/jackalLabs/canine-chain/x/storage/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/jackal-dao/canine-chain/storage/params";
  }

  // Queries a File by index.
  rpc File(QueryFileRequest) returns (QueryFileResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/files/{merkle}/{owner}/{start}";
  }

  // Queries a list of File items.
  rpc FilesAll(QueryAllFilesRequest)
      returns (QueryAllFilesResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/files";
  }

  // Queries a list of File items.
  rpc OpenFiles(QueryOpenFilesRequest)
      returns (QueryAllFilesResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/open_files/{provider_address}";
  }

  // Queries a list of File items.
  rpc Proof(QueryProofRequest)
      returns (QueryProofResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/proof/{provider_address}/{merkle}/{owner}/{start}";
  }

  // Queries a Providers by index.
  rpc Providers(QueryProviderRequest) returns (QueryProviderResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/providers/{address}";
  }

  // Queries a list of Providers items.
  rpc ProvidersAll(QueryAllProvidersRequest)
      returns (QueryAllProvidersResponse) {
    option (google.api.http).get = "/jackal-dao/canine-chain/storage/providers";
  }

  // Queries a Attestation by index.
  rpc Attestation(QueryAttestationRequest) returns (QueryAttestationResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/attestations/{prover}/{merkle}/{owner}/{start}";
  }

  // Queries a list of Attestation items.
  rpc AttestationsAll(QueryAllAttestationsRequest)
      returns (QueryAllAttestationsResponse) {
    option (google.api.http).get = "/jackal-dao/canine-chain/storage/attestations";
  }

  // Queries a Report by index.
  rpc Reports(QueryReportRequest) returns (QueryReportResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/reports/{prover}/{merkle}/{owner}/{start}";
  }

  // Queries a list of Attestation items.
  rpc ReportsAll(QueryAllReportRequest)
      returns (QueryAllReportResponse) {
    option (google.api.http).get = "/jackal-dao/canine-chain/storage/reports";
  }

  // Queries a list of Freespace items.
  rpc Freespace(QueryFreespaceRequest) returns (QueryFreespaceResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/freespace/{address}";
  }

  // Queries a list of Freespace items.
  rpc StoreCount(QueryStoreCountRequest) returns (QueryStoreCountResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/storing/{address}";
  }

  // Queries a list of FindFile items.
  rpc FindFile(QueryFindFileRequest) returns (QueryFindFileResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/find_file/{merkle}";
  }

  // Queries a list of GetClientFreeSpace items.
  rpc GetClientFreeSpace(QueryClientFreeSpaceRequest)
      returns (QueryClientFreeSpaceResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/get_client_free_space/{address}";
  }

  // Queries a list of GetPayData items.
  rpc GetPayData(QueryPayDataRequest) returns (QueryPayDataResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/get_pay_data/{address}";
  }

  // Queries a StoragePaymentInfo by address.
  rpc StoragePaymentInfo(QueryStoragePaymentInfoRequest) returns (QueryStoragePaymentInfoResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/payment_info/{address}";
  }

  // Queries a list of StoragePaymentInfo items.
  rpc StoragePaymentInfoAll(QueryAllStoragePaymentInfoRequest)
      returns (QueryAllStoragePaymentInfoResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/payment_info";
  }

  // Queries whether user can upload a file based on size
  rpc FileUploadCheck(QueryFileUploadCheckRequest) returns (QueryFileUploadCheckResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/file_upload_check";
  }

  // Queries whether user can upload a file based on size
  rpc PriceCheck(QueryPriceCheckRequest) returns (QueryPriceCheckResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/price_check/{duration}/{bytes}";
  }

  // Queries whether user can upload a file based on size
  rpc ActiveProviders(QueryActiveProvidersRequest) returns (QueryActiveProvidersResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/active_providers";
  }


  // Queries the storage space used and purchased
  rpc StorageStats(QueryStorageStatsRequest) returns (QueryStorageStatsResponse) {
    option (google.api.http).get =
        "/jackal-dao/canine-chain/storage/storage_stats";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryProofRequest {
  string provider_address = 1;
  bytes merkle = 2;
  string owner = 3;
  int64 start = 4;
}

message QueryProofResponse {
  FileProof proof = 1 [ (gogoproto.nullable) = false ];
}

message QueryProofsByAddressRequest {
  string provider_address = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;

}

message QueryProofsByAddressResponse {
  repeated FileProof proof = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;

}

message QueryFileRequest {
  bytes merkle = 1;
  string owner = 2;
  int64 start = 3;
}

message QueryFileResponse {
  UnifiedFile file = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllFilesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryOpenFilesRequest {
  string provider_address= 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllFilesResponse {
  repeated UnifiedFile files = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryProviderRequest { string address = 1; }

message QueryProviderResponse {
  Providers providers = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllProvidersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllProvidersResponse {
  repeated Providers providers = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryAttestationRequest {
  string prover = 1;
  bytes merkle = 2;
  string owner = 3;
  int64 start = 4;
}

message QueryAttestationResponse {
  AttestationForm attestation = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllAttestationsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAttestationsResponse {
  repeated AttestationForm attestations = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryReportRequest {
  string prover = 1;
  bytes merkle = 2;
  string owner = 3;
  int64 start = 4;
}

message QueryReportResponse {
  ReportForm report = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllReportRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllReportResponse {
  repeated ReportForm reports = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryFreespaceRequest { string address = 1; }

message QueryStoreCountRequest { string address = 1; }

message QueryFreespaceResponse { string space = 1; }

message QueryStoreCountResponse { string count = 1; }


message QueryFindFileRequest { bytes merkle = 1; }

message QueryFindFileResponse { string provider_ips = 1; }



message QueryClientFreeSpaceRequest { string address = 1; }

message QueryClientFreeSpaceResponse { int64 bytesfree = 1; }

message QueryPayDataRequest { string address = 1; }

message QueryPayDataResponse {
  int64 time_remaining = 1;
  int64 bytes = 2;
}

message QueryStoragePaymentInfoRequest { string address = 1; }

message QueryStoragePaymentInfoResponse {
  StoragePaymentInfo storage_payment_info = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllStoragePaymentInfoRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStoragePaymentInfoResponse  {
  repeated StoragePaymentInfo storage_payment_info = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryFileUploadCheckRequest {
  string address = 1;
  int64 bytes = 2;
}

message QueryFileUploadCheckResponse {
  bool valid = 1;
}

message QueryPriceCheckRequest {
  string duration = 1;
  int64 bytes = 2;
}

message QueryPriceCheckResponse {
  int64 price = 1;
}

message QueryActiveProvidersRequest {
}

message QueryActiveProvidersResponse {
  repeated ActiveProviders providers = 1 [ (gogoproto.nullable) = false ];
}

message QueryStorageStatsRequest {}

message QueryStorageStatsResponse {
  uint64 purchased = 1;
  uint64 used = 2;
  bytes usedRatio = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
  uint64 activeUsers = 4;
  map<int64, int64> users_by_plan= 5;
}
