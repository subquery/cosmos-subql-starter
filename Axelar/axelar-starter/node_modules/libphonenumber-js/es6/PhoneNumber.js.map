{"version":3,"file":"PhoneNumber.js","names":["Metadata","isPossibleNumber","isValidNumber","isValidNumberForRegion","getNumberType","formatNumber","USE_NON_GEOGRAPHIC_COUNTRY_CODE","PhoneNumber","countryCallingCode","nationalNumber","metadata","TypeError","_metadata","isCountryCode","country","isNonGeographicCallingCode","number","ext","v2","phoneNumber","format","options","value","test"],"sources":["../source/PhoneNumber.js"],"sourcesContent":["import Metadata from './metadata.js'\r\nimport isPossibleNumber from './isPossibleNumber_.js'\r\nimport isValidNumber from './validate_.js'\r\nimport isValidNumberForRegion from './isValidNumberForRegion_.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\nimport formatNumber from './format_.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class PhoneNumber {\r\n\tconstructor(countryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryCallingCode) {\r\n\t\t\tthrow new TypeError('`country` or `countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\tif (!metadata) {\r\n\t\t\tthrow new TypeError('`metadata` not passed')\r\n\t\t}\r\n\t\tconst _metadata = new Metadata(metadata)\r\n\t\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t\t// Also store the country code as `.country`.\r\n\t\tif (isCountryCode(countryCallingCode)) {\r\n\t\t\tthis.country = countryCallingCode\r\n\t\t\t_metadata.country(countryCallingCode)\r\n\t\t\tcountryCallingCode = _metadata.countryCallingCode()\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\r\n\t\t\t\t\tthis.country = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tsetExt(ext) {\r\n\t\tthis.ext = ext\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisNonGeographic() {\r\n\t\tconst metadata = new Metadata(this.metadata)\r\n\t\treturn metadata.isNonGeographicCallingCode(this.countryCallingCode)\r\n\t}\r\n\r\n\tisEqual(phoneNumber) {\r\n\t\treturn this.number === phoneNumber.number && this.ext === phoneNumber.ext\r\n\t}\r\n\r\n\t// // Is just an alias for `this.isValid() && this.country === country`.\r\n\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n\t// isValidForRegion(country) {\r\n\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(\r\n\t\t\tthis,\r\n\t\t\tformat,\r\n\t\t\toptions ? { ...options, v2: true } : { v2: true },\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)"],"mappings":"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"}