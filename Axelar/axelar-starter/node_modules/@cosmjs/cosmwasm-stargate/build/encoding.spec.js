"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const encoding_1 = require("./encoding");
describe("encoding", () => {
    describe("toBinary", () => {
        it("works for objects", () => {
            // echo -n "{}" | base64
            expect((0, encoding_1.toBinary)({})).toEqual("e30=");
            // echo -n '{"swap":{"max_spread":"0.25"}}' | base64
            // eslint-disable-next-line @typescript-eslint/naming-convention
            expect((0, encoding_1.toBinary)({ swap: { max_spread: "0.25" } })).toEqual("eyJzd2FwIjp7Im1heF9zcHJlYWQiOiIwLjI1In19");
            // echo -n '{"num":3.45,"null":null,"bool":true,"obj":{"str":"bar"}}' | base64
            expect((0, encoding_1.toBinary)({ num: 3.45, null: null, bool: true, obj: { str: "bar" }, omitted: undefined })).toEqual("eyJudW0iOjMuNDUsIm51bGwiOm51bGwsImJvb2wiOnRydWUsIm9iaiI6eyJzdHIiOiJiYXIifX0=");
        });
        it("works for strings", () => {
            // echo -n '""' | base64
            expect((0, encoding_1.toBinary)("")).toEqual("IiI=");
            // echo -n '"hi"' | base64
            expect((0, encoding_1.toBinary)("hi")).toEqual("ImhpIg==");
        });
        it("works for arrays", () => {
            // echo -n '[]' | base64
            expect((0, encoding_1.toBinary)([])).toEqual("W10=");
            // echo -n '[1,2,3]' | base64
            expect((0, encoding_1.toBinary)([1, 2, 3])).toEqual("WzEsMiwzXQ==");
        });
        it("works for booleans", () => {
            // echo -n 'true' | base64
            expect((0, encoding_1.toBinary)(true)).toEqual("dHJ1ZQ==");
        });
        it("works for numbers", () => {
            // echo -n '12.21' | base64
            expect((0, encoding_1.toBinary)(12.21)).toEqual("MTIuMjE=");
        });
        it("works for null", () => {
            // echo -n 'null' | base64
            expect((0, encoding_1.toBinary)(null)).toEqual("bnVsbA==");
        });
    });
    describe("fromBinary", () => {
        it("works for objects", () => {
            // echo -n "{}" | base64
            expect((0, encoding_1.fromBinary)("e30=")).toEqual({});
            // echo -n '{"swap":{"max_spread":"0.25"}}' | base64
            expect((0, encoding_1.fromBinary)("eyJzd2FwIjp7Im1heF9zcHJlYWQiOiIwLjI1In19")).toEqual({
                // eslint-disable-next-line @typescript-eslint/naming-convention
                swap: { max_spread: "0.25" },
            });
            // echo -n '{"num":3.45,"null":null,"bool":true,"obj":{"str":"bar"}}' | base64
            expect((0, encoding_1.fromBinary)("eyJudW0iOjMuNDUsIm51bGwiOm51bGwsImJvb2wiOnRydWUsIm9iaiI6eyJzdHIiOiJiYXIifX0=")).toEqual({ num: 3.45, null: null, bool: true, obj: { str: "bar" } });
        });
        it("works for strings", () => {
            // echo -n '""' | base64
            expect((0, encoding_1.fromBinary)("IiI=")).toEqual("");
            // echo -n '"hi"' | base64
            expect((0, encoding_1.fromBinary)("ImhpIg==")).toEqual("hi");
        });
        it("works for arrays", () => {
            // echo -n '[]' | base64
            expect((0, encoding_1.fromBinary)("W10=")).toEqual([]);
            // echo -n '[1,2,3]' | base64
            expect((0, encoding_1.fromBinary)("WzEsMiwzXQ==")).toEqual([1, 2, 3]);
        });
        it("works for booleans", () => {
            // echo -n 'true' | base64
            expect((0, encoding_1.fromBinary)("dHJ1ZQ==")).toEqual(true);
        });
        it("works for numbers", () => {
            // echo -n '12.21' | base64
            expect((0, encoding_1.fromBinary)("MTIuMjE=")).toEqual(12.21);
        });
        it("works for null", () => {
            // echo -n 'null' | base64
            expect((0, encoding_1.fromBinary)("bnVsbA==")).toEqual(null);
        });
    });
});
//# sourceMappingURL=encoding.spec.js.map