{"version":3,"file":"load.js","sourceRoot":"","sources":["../../src/project/load.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;AAEtC,4CAAoB;AACpB,gDAAwB;AACxB,0CAAiD;AACjD,yDAA+C;AAC/C,qDAA6C;AAC7C,6BAAqC;AACrC,qCAAoC;AACpC,2CAAuF;AAEvF,SAAgB,4BAA4B,CAAC,GAAY;IACvD,MAAM,eAAe,GAAG,IAAI,4CAAgC,CAAC,GAA+B,CAAC,CAAC;IAC9F,eAAe,CAAC,QAAQ,EAAE,CAAC;IAC3B,OAAO,eAAe,CAAC;AACzB,CAAC;AAJD,oEAIC;AAED,SAAgB,cAAc,CAAC,IAAY,EAAE,WAAmB;IAC9D,MAAM,EAAC,GAAG,EAAC,GAAG,cAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC/B,MAAM,QAAQ,GAAG,cAAI,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IACjD,IAAI,YAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;QAC3B,IAAI,GAAG,KAAK,KAAK,IAAI,GAAG,KAAK,MAAM,EAAE;YACnC,iGAAiG;YACjG,OAAO,oBAAoB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;SACpD;aAAM,IAAI,GAAG,KAAK,OAAO,IAAI,GAAG,KAAK,MAAM,IAAI,GAAG,KAAK,OAAO,EAAE;YAC/D,OAAO,IAAA,2BAAkB,EAAC,QAAQ,CAAC,CAAC;SACrC;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,aAAa,GAAG,gBAAgB,CAAC,CAAC;SACnD;KACF;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,kBAAkB,IAAI,YAAY,CAAC,CAAC;KACrD;AACH,CAAC;AAfD,wCAeC;AAED,SAAgB,2BAA2B,CAAC,IAAY;IACtD,IAAI,YAAY,GAAG,IAAI,CAAC;IACxB,IAAI,YAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,YAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE;QAC3D,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QACrD,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QACrD,IAAI,YAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;YAC/B,YAAY,GAAG,YAAY,CAAC;SAC7B;aAAM,IAAI,YAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;YACtC,YAAY,GAAG,YAAY,CAAC;SAC7B;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,6CAA6C,IAAI,EAAE,CAAC,CAAC;SACtE;KACF;IAED,MAAM,GAAG,GAAG,IAAA,2BAAkB,EAAC,YAAY,CAAC,CAAC;IAC7C,MAAM,eAAe,GAAG,IAAI,4CAAgC,CAAC,GAA+B,CAAC,CAAC;IAC9F,eAAe,CAAC,QAAQ,EAAE,CAAC;IAC3B,OAAO,eAAe,CAAC;AACzB,CAAC;AAlBD,kEAkBC;AACD,SAAgB,eAAe,CAAC,GAAY;IAC1C,MAAM,UAAU,GAAG,IAAA,gCAAY,EAAC,mBAAU,EAAE,GAAG,CAAC,CAAC;IACjD,IACE,CAAC,CAAC,UAAU,CAAC,KAAK;QAClB,CAAC,CAAC,UAAU,CAAC,UAAU;QACvB,CAAC,CAAC,UAAU,CAAC,WAAW;QACxB,CAAC,CAAC,UAAU,CAAC,UAAU;QACvB,CAAC,CAAC,UAAU,CAAC,SAAS,EACtB;QACA,MAAM,MAAM,GAAG,IAAA,8BAAY,EAAC,UAAU,EAAE,EAAC,SAAS,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAC,CAAC,CAAC;QACvF,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,EAAE;YAClB,4BAA4B;YAC5B,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7D,MAAM,IAAI,KAAK,CAAC,iCAAiC,SAAS,EAAE,CAAC,CAAC;SAC/D;QACD,OAAO,UAAU,CAAC;KACnB;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC5C;AACH,CAAC;AAnBD,0CAmBC;AAED,SAAgB,oBAAoB,CAAC,QAAgB,EAAE,WAAoB;IACzE,MAAM,EAAC,IAAI,EAAE,GAAG,EAAC,GAAG,cAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACzC,MAAM,IAAI,GAAG,WAAW,aAAX,WAAW,cAAX,WAAW,GAAI,cAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACnD,MAAM,EAAE,GAAG,IAAI,YAAM,CAAC;QACpB,OAAO,EAAE,UAAU;QACnB,IAAI,EAAE,KAAK;QACX,OAAO,EAAE,EAAE;QACX,OAAO,EAAE;YACP,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,IAAI;YACd,OAAO,EAAE,CAAC,MAAM,CAAC;YACjB,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,CAAC,UAAkB,EAAE,EAAE;gBAC9B,OAAO,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,EAAC,KAAK,EAAE,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC;YACtD,CAAC;SACF;QACD,OAAO,EAAE,UAAU;QACnB,gBAAgB,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC;KAChC,CAAC,CAAC;IACH,IAAI,UAAmB,CAAC;IACxB,IAAI;QACF,MAAM,MAAM,GAAG,IAAI,cAAQ,CACzB,6BAA6B,QAAQ,aAAa,EAClD,cAAI,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAC3B,CAAC,OAAO,EAAE,CAAC;QACZ,UAAU,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAY,CAAC;KACxC;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,oBAAoB,GAAG,EAAE,CAAC,CAAC;KAC5C;IACD,IAAI,UAAU,KAAK,SAAS,EAAE;QAC5B,MAAM,IAAI,KAAK,CAAC,mDAAmD,IAAI,OAAO,CAAC,CAAC;KACjF;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAjCD,oDAiCC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {loadFromJsonOrYaml} from '@subql/common';\nimport {plainToClass} from 'class-transformer';\nimport {validateSync} from 'class-validator';\nimport {NodeVM, VMScript} from 'vm2';\nimport {ChainTypes} from './models';\nimport {EthereumProjectManifestVersioned, VersionedProjectManifest} from './versioned';\n\nexport function parseEthereumProjectManifest(raw: unknown): EthereumProjectManifestVersioned {\n  const projectManifest = new EthereumProjectManifestVersioned(raw as VersionedProjectManifest);\n  projectManifest.validate();\n  return projectManifest;\n}\n\nexport function loadChainTypes(file: string, projectRoot: string): unknown {\n  const {ext} = path.parse(file);\n  const filePath = path.resolve(projectRoot, file);\n  if (fs.existsSync(filePath)) {\n    if (ext === '.js' || ext === '.cjs') {\n      //load can be self contained js file, or js depend on node_module which will require project root\n      return loadChainTypesFromJs(filePath, projectRoot);\n    } else if (ext === '.yaml' || ext === '.yml' || ext === '.json') {\n      return loadFromJsonOrYaml(filePath);\n    } else {\n      throw new Error(`Extension ${ext} not supported`);\n    }\n  } else {\n    throw new Error(`Load from file ${file} not exist`);\n  }\n}\n\nexport function loadEthereumProjectManifest(file: string): EthereumProjectManifestVersioned {\n  let manifestPath = file;\n  if (fs.existsSync(file) && fs.lstatSync(file).isDirectory()) {\n    const yamlFilePath = path.join(file, 'project.yaml');\n    const jsonFilePath = path.join(file, 'project.json');\n    if (fs.existsSync(yamlFilePath)) {\n      manifestPath = yamlFilePath;\n    } else if (fs.existsSync(jsonFilePath)) {\n      manifestPath = jsonFilePath;\n    } else {\n      throw new Error(`Could not find project manifest under dir ${file}`);\n    }\n  }\n\n  const doc = loadFromJsonOrYaml(manifestPath);\n  const projectManifest = new EthereumProjectManifestVersioned(doc as VersionedProjectManifest);\n  projectManifest.validate();\n  return projectManifest;\n}\nexport function parseChainTypes(raw: unknown): ChainTypes {\n  const chainTypes = plainToClass(ChainTypes, raw);\n  if (\n    !!chainTypes.types ||\n    !!chainTypes.typesChain ||\n    !!chainTypes.typesBundle ||\n    !!chainTypes.typesAlias ||\n    !!chainTypes.typesSpec\n  ) {\n    const errors = validateSync(chainTypes, {whitelist: true, forbidNonWhitelisted: true});\n    if (errors?.length) {\n      // TODO: print error details\n      const errorMsgs = errors.map((e) => e.toString()).join('\\n');\n      throw new Error(`failed to parse chain types.\\n${errorMsgs}`);\n    }\n    return chainTypes;\n  } else {\n    throw new Error(`chainTypes is not valid`);\n  }\n}\n\nexport function loadChainTypesFromJs(filePath: string, requireRoot?: string): unknown {\n  const {base, ext} = path.parse(filePath);\n  const root = requireRoot ?? path.dirname(filePath);\n  const vm = new NodeVM({\n    console: 'redirect',\n    wasm: false,\n    sandbox: {},\n    require: {\n      context: 'sandbox',\n      external: true,\n      builtin: ['path'],\n      root: root,\n      resolve: (moduleName: string) => {\n        return require.resolve(moduleName, {paths: [root]});\n      },\n    },\n    wrapper: 'commonjs',\n    sourceExtensions: ['js', 'cjs'],\n  });\n  let rawContent: unknown;\n  try {\n    const script = new VMScript(\n      `module.exports = require('${filePath}').default;`,\n      path.join(root, 'sandbox')\n    ).compile();\n    rawContent = vm.run(script) as unknown;\n  } catch (err) {\n    throw new Error(`\\n NodeVM error: ${err}`);\n  }\n  if (rawContent === undefined) {\n    throw new Error(`There was no default export found from required ${base} file`);\n  }\n  return rawContent;\n}\n"]}