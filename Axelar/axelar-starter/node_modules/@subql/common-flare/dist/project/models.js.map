{"version":3,"file":"models.js","sourceRoot":"","sources":["../../src/project/models.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {RegisteredTypes, RegistryTypes, OverrideModuleType, OverrideBundleType} from '@polkadot/types/types';\n\nimport {BaseMapping} from '@subql/common';\nimport {\n  EthereumHandlerKind,\n  EthereumDatasourceKind,\n  EthereumLogFilter,\n  SubqlCustomHandler,\n  SubqlMapping,\n  SubqlHandler,\n  SubqlRuntimeHandler,\n  SubqlRuntimeDatasource,\n  SubqlCustomDatasource,\n  FileReference,\n  CustomDataSourceAsset,\n  EthereumBlockFilter,\n  SubqlBlockHandler,\n  SubqlEventHandler,\n  SubqlCallHandler,\n  EthereumTransactionFilter,\n  SubqlDatasource,\n} from '@subql/types-flare';\nimport {plainToClass, Transform, Type} from 'class-transformer';\nimport {\n  ArrayMaxSize,\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsInt,\n  IsOptional,\n  IsString,\n  IsObject,\n  ValidateNested,\n} from 'class-validator';\nimport {SubqlEthereumDatasourceKind, SubqlEthereumHandlerKind} from './types';\n\nexport class BlockFilter implements EthereumBlockFilter {\n  @IsOptional()\n  @IsInt()\n  modulo?: number;\n  @IsOptional()\n  @IsString()\n  timestamp?: string;\n}\n\nexport class LogFilter implements EthereumLogFilter {\n  @IsOptional()\n  @IsArray()\n  topics?: string[];\n  @IsOptional()\n  @IsString()\n  address?: string;\n}\n\nexport class ChainTypes implements RegisteredTypes {\n  @IsObject()\n  @IsOptional()\n  types?: RegistryTypes;\n  @IsObject()\n  @IsOptional()\n  typesAlias?: Record<string, OverrideModuleType>;\n  @IsObject()\n  @IsOptional()\n  typesBundle?: OverrideBundleType;\n  @IsObject()\n  @IsOptional()\n  typesChain?: Record<string, RegistryTypes>;\n  @IsObject()\n  @IsOptional()\n  typesSpec?: Record<string, RegistryTypes>;\n}\n\nexport class TransactionFilter implements EthereumTransactionFilter {\n  @IsOptional()\n  @IsString()\n  from?: string;\n  @IsOptional()\n  @IsString()\n  to?: string;\n  @IsOptional()\n  @IsString()\n  function?: string;\n}\n\nexport class BlockHandler implements SubqlBlockHandler {\n  @IsObject()\n  @IsOptional()\n  @Type(() => BlockFilter)\n  filter?: BlockFilter;\n  @IsEnum(SubqlEthereumHandlerKind, {groups: [SubqlEthereumHandlerKind.FlareBlock, SubqlEthereumHandlerKind.EthBlock]})\n  kind: EthereumHandlerKind.Block;\n  @IsString()\n  handler: string;\n}\n\nexport class CallHandler implements SubqlCallHandler {\n  @IsObject()\n  @IsOptional()\n  @Type(() => TransactionFilter)\n  filter?: TransactionFilter;\n  @IsEnum(SubqlEthereumHandlerKind, {groups: [SubqlEthereumHandlerKind.FlareCall, SubqlEthereumHandlerKind.EthCall]})\n  kind: EthereumHandlerKind.Call;\n  @IsString()\n  handler: string;\n}\n\nexport class EventHandler implements SubqlEventHandler {\n  @IsObject()\n  @IsOptional()\n  @Type(() => LogFilter)\n  filter?: LogFilter;\n  @IsEnum(SubqlEthereumHandlerKind, {groups: [SubqlEthereumHandlerKind.FlareEvent, SubqlEthereumHandlerKind.EthEvent]})\n  kind: EthereumHandlerKind.Event;\n  @IsString()\n  handler: string;\n}\n\nexport class CustomHandler implements SubqlCustomHandler {\n  @IsString()\n  kind: string;\n  @IsString()\n  handler: string;\n  @IsObject()\n  @IsOptional()\n  filter?: Record<string, unknown>;\n}\n\nexport class EthereumMapping implements SubqlMapping {\n  @Transform((params) => {\n    const handlers: SubqlHandler[] = params.value;\n    return handlers.map((handler) => {\n      switch (handler.kind) {\n        case SubqlEthereumHandlerKind.FlareEvent:\n          return plainToClass(EventHandler, handler);\n        case SubqlEthereumHandlerKind.FlareCall:\n          return plainToClass(CallHandler, handler);\n        case SubqlEthereumHandlerKind.FlareBlock:\n          return plainToClass(BlockHandler, handler);\n        case SubqlEthereumHandlerKind.EthEvent:\n          return plainToClass(EventHandler, handler);\n        case SubqlEthereumHandlerKind.EthCall:\n          return plainToClass(CallHandler, handler);\n        case SubqlEthereumHandlerKind.EthBlock:\n          return plainToClass(BlockHandler, handler);\n        default:\n          throw new Error(`handler ${(handler as any).kind} not supported`);\n      }\n    });\n  })\n  @IsArray()\n  @ValidateNested()\n  handlers: SubqlHandler[];\n  @IsString()\n  file: string;\n}\n\nexport class CustomMapping implements SubqlMapping<SubqlCustomHandler> {\n  @IsArray()\n  @Type(() => CustomHandler)\n  @ValidateNested()\n  handlers: CustomHandler[];\n  @IsString()\n  file: string;\n}\n\nexport class RuntimeDataSourceBase<M extends SubqlMapping<SubqlRuntimeHandler>> implements SubqlRuntimeDatasource<M> {\n  @IsEnum(SubqlEthereumDatasourceKind, {\n    groups: [SubqlEthereumDatasourceKind.FlareRuntime, SubqlEthereumDatasourceKind.EthRuntime],\n  })\n  kind: EthereumDatasourceKind.Runtime;\n  @Type(() => EthereumMapping)\n  @ValidateNested()\n  mapping: M;\n  @IsOptional()\n  @IsInt()\n  startBlock?: number;\n  @IsOptional()\n  assets?: Map<string, FileReference>;\n  @IsOptional()\n  options?: any;\n}\n\nexport class FileReferenceImpl implements FileReference {\n  @IsString()\n  file: string;\n}\n\nexport class CustomDataSourceBase<K extends string, M extends SubqlMapping = SubqlMapping<SubqlCustomHandler>>\n  implements SubqlCustomDatasource<K, M>\n{\n  @IsString()\n  kind: K;\n  @Type(() => CustomMapping)\n  @ValidateNested()\n  mapping: M;\n  @IsOptional()\n  @IsInt()\n  startBlock?: number;\n  @Type(() => FileReferenceImpl)\n  @ValidateNested({each: true})\n  assets: Map<string, CustomDataSourceAsset>;\n  @Type(() => FileReferenceImpl)\n  @IsObject()\n  processor: FileReference;\n}\n"]}