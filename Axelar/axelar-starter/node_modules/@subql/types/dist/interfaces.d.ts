import { AnyTuple, Codec } from '@polkadot/types-codec/types';
import { GenericExtrinsic } from '@polkadot/types/extrinsic';
import { EventRecord, SignedBlock } from '@polkadot/types/interfaces';
import { IEvent } from '@polkadot/types/types';
export interface Entity {
    id: string;
}
export type FunctionPropertyNames<T> = {
    [K in keyof T]: T[K] extends Function ? K : never;
}[keyof T];
export interface Store {
    get(entity: string, id: string): Promise<Entity | null>;
    getByField(entity: string, field: string, value: any, options?: {
        offset?: number;
        limit?: number;
    }): Promise<Entity[]>;
    getOneByField(entity: string, field: string, value: any): Promise<Entity | null>;
    set(entity: string, id: string, data: Entity): Promise<void>;
    bulkCreate(entity: string, data: Entity[]): Promise<void>;
    bulkUpdate(entity: string, data: Entity[], fields?: string[]): Promise<void>;
    remove(entity: string, id: string): Promise<void>;
}
export interface SubstrateBlock extends SignedBlock {
    specVersion: number;
    timestamp: Date;
    events: EventRecord[];
}
export interface SubstrateExtrinsic<A extends AnyTuple = AnyTuple> {
    idx: number;
    extrinsic: GenericExtrinsic<A>;
    block: SubstrateBlock;
    events: TypedEventRecord<Codec[]>[];
    success: boolean;
}
export interface SubstrateEvent<T extends AnyTuple = AnyTuple> extends TypedEventRecord<T> {
    idx: number;
    extrinsic?: SubstrateExtrinsic;
    block: SubstrateBlock;
}
export type DynamicDatasourceCreator = (name: string, args: Record<string, unknown>) => Promise<void>;
export type TypedEventRecord<T extends AnyTuple> = Omit<EventRecord, 'event'> & {
    event: IEvent<T>;
};
