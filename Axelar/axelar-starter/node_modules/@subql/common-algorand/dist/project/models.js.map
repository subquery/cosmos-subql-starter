{"version":3,"file":"models.js","sourceRoot":"","sources":["../../src/project/models.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {BaseMapping, FileReference} from '@subql/common';\nimport {\n  CustomDataSourceAsset as AlgorandCustomDataSourceAsset,\n  AlgorandBlockFilter,\n  AlgorandBlockHandler,\n  AlgorandCustomHandler,\n  AlgorandDataSourceKind,\n  AlgorandHandlerKind,\n  AlgorandRuntimeDataSource,\n  AlgorandRuntimeHandler,\n  AlgorandRuntimeHandlerFilter,\n  AlgorandCustomDataSource,\n  AlgorandTransactionHandler,\n  AlgorandTransactionFilter,\n} from '@subql/types-algorand';\nimport {TransactionType} from 'algosdk';\nimport {plainToClass, Transform, Type} from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsInt,\n  IsOptional,\n  IsString,\n  IsObject,\n  ValidateNested,\n  IsNumber,\n  ValidateIf,\n} from 'class-validator';\n\nexport class BlockFilter implements AlgorandBlockFilter {\n  @IsOptional()\n  @IsInt()\n  modulo?: number;\n  @IsOptional()\n  @IsString()\n  timestamp?: string;\n}\n\nexport class TransactionFilter implements AlgorandTransactionFilter {\n  @IsEnum(TransactionType)\n  @IsOptional()\n  txType?: TransactionType;\n\n  @IsString()\n  @IsOptional()\n  @ValidateIf((o: TransactionFilter) => {\n    return o.txType === TransactionType.pay || o.txType === TransactionType.axfer || o.txType === TransactionType.appl;\n  })\n  sender?: string;\n\n  @IsString()\n  @IsOptional()\n  @ValidateIf((o: TransactionFilter) => {\n    return o.txType === TransactionType.pay || o.txType === TransactionType.axfer;\n  })\n  receiver?: string;\n\n  @IsBoolean()\n  @IsOptional()\n  @ValidateIf((o: TransactionFilter) => o.txType === TransactionType.keyreg)\n  nonParticipant?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ValidateIf((o: TransactionFilter) => {\n    return o.txType === TransactionType.acfg || o.txType === TransactionType.axfer || o.txType === TransactionType.afrz;\n  })\n  assetId?: number;\n\n  @IsBoolean()\n  @IsOptional()\n  @ValidateIf((o: TransactionFilter) => o.txType === TransactionType.afrz)\n  newFreezeStatus?: boolean;\n\n  @IsString()\n  @IsOptional()\n  @ValidateIf((o: TransactionFilter) => o.txType === TransactionType.afrz)\n  address?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ValidateIf((o: TransactionFilter) => o.txType === TransactionType.appl)\n  applicationId?: number;\n}\n\nexport class BlockHandler implements AlgorandBlockHandler {\n  @IsEnum(AlgorandHandlerKind, {groups: [AlgorandHandlerKind.Block]})\n  kind: AlgorandHandlerKind.Block;\n\n  @IsString()\n  handler: string;\n\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => BlockFilter)\n  filter?: AlgorandBlockFilter;\n}\n\nexport class TransactionHandler implements AlgorandTransactionHandler {\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => TransactionFilter)\n  filter?: AlgorandTransactionFilter;\n\n  @IsEnum(AlgorandHandlerKind, {groups: [AlgorandHandlerKind.Block]})\n  kind: AlgorandHandlerKind.Transaction;\n\n  @IsString()\n  handler: string;\n}\n\nexport class CustomHandler implements AlgorandCustomHandler {\n  @IsString()\n  kind: string;\n\n  @IsString()\n  handler: string;\n\n  @IsObject()\n  @IsOptional()\n  filter?: Record<string, unknown>;\n}\n\nexport class RuntimeMapping implements BaseMapping<AlgorandRuntimeHandlerFilter, AlgorandRuntimeHandler> {\n  @Transform((params) => {\n    const handlers: AlgorandRuntimeHandler[] = params.value;\n    return handlers.map((handler) => {\n      switch (handler.kind) {\n        case AlgorandHandlerKind.Block:\n          return plainToClass(BlockHandler, handler);\n        case AlgorandHandlerKind.Transaction:\n          return plainToClass(TransactionHandler, handler);\n        default:\n          throw new Error(`handler ${(handler as any).kind} not supported`);\n      }\n    });\n  })\n  @IsArray()\n  @ValidateNested()\n  handlers: AlgorandRuntimeHandler[];\n\n  @IsString()\n  file: string;\n}\n\nexport class CustomMapping implements BaseMapping<Record<string, unknown>, AlgorandCustomHandler> {\n  @IsArray()\n  @Type(() => CustomHandler)\n  @ValidateNested()\n  handlers: CustomHandler[];\n\n  @IsString()\n  file: string;\n}\n\nexport class RuntimeDataSourceBase implements AlgorandRuntimeDataSource {\n  @IsEnum(AlgorandDataSourceKind, {groups: [AlgorandDataSourceKind.Runtime]})\n  kind: AlgorandDataSourceKind.Runtime;\n\n  @Type(() => RuntimeMapping)\n  @ValidateNested()\n  mapping: RuntimeMapping;\n\n  @IsOptional()\n  @IsInt()\n  startBlock?: number;\n}\n\nexport class FileReferenceImpl implements FileReference {\n  @IsString()\n  file: string;\n}\n\nexport class CustomDataSourceBase<K extends string, M extends CustomMapping, O = any>\n  implements AlgorandCustomDataSource<K, M, O>\n{\n  @IsString()\n  kind: K;\n\n  @Type(() => CustomMapping)\n  @ValidateNested()\n  mapping: M;\n\n  @IsOptional()\n  @IsInt()\n  startBlock?: number;\n\n  @Type(() => FileReferenceImpl)\n  @ValidateNested({each: true})\n  assets: Map<string, AlgorandCustomDataSourceAsset>;\n\n  @Type(() => FileReferenceImpl)\n  @IsObject()\n  processor: FileReference;\n}\n"]}