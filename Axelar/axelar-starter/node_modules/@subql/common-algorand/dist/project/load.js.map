{"version":3,"file":"load.js","sourceRoot":"","sources":["../../src/project/load.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,0CAAkE;AAClE,2CAAuF;AAEvF,SAAgB,4BAA4B,CAAC,GAAY;IACvD,MAAM,eAAe,GAAG,IAAI,4CAAgC,CAAC,GAA+B,CAAC,CAAC;IAC9F,eAAe,CAAC,QAAQ,EAAE,CAAC;IAC3B,OAAO,eAAe,CAAC;AACzB,CAAC;AAJD,oEAIC;AAED,SAAgB,4BAA4B,CAAC,IAAY;IACvD,MAAM,GAAG,GAAG,IAAA,2BAAkB,EAAC,IAAA,wBAAe,EAAC,IAAI,CAAC,CAAC,CAAC;IACtD,MAAM,eAAe,GAAG,IAAI,4CAAgC,CAAC,GAA+B,CAAC,CAAC;IAC9F,eAAe,CAAC,QAAQ,EAAE,CAAC;IAC3B,OAAO,eAAe,CAAC;AACzB,CAAC;AALD,oEAKC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {getManifestPath, loadFromJsonOrYaml} from '@subql/common';\nimport {AlgorandProjectManifestVersioned, VersionedProjectManifest} from './versioned';\n\nexport function parseAlgorandProjectManifest(raw: unknown): AlgorandProjectManifestVersioned {\n  const projectManifest = new AlgorandProjectManifestVersioned(raw as VersionedProjectManifest);\n  projectManifest.validate();\n  return projectManifest;\n}\n\nexport function loadSubstrateProjectManifest(file: string): AlgorandProjectManifestVersioned {\n  const doc = loadFromJsonOrYaml(getManifestPath(file));\n  const projectManifest = new AlgorandProjectManifestVersioned(doc as VersionedProjectManifest);\n  projectManifest.validate();\n  return projectManifest;\n}\n"]}