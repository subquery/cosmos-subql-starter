"use strict";
// Copyright 2020-2022 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomDataSourceBase = exports.FileReferenceImpl = exports.RuntimeDataSourceBase = exports.CustomMapping = exports.AvalancheMapping = exports.CustomHandler = exports.EventHandler = exports.CallHandler = exports.BlockHandler = exports.TransactionFilter = exports.ChainTypes = exports.LogFilter = exports.BlockFilter = void 0;
const types_avalanche_1 = require("@subql/types-avalanche");
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
class BlockFilter {
}
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsInt)(),
    __metadata("design:type", Number)
], BlockFilter.prototype, "modulo", void 0);
exports.BlockFilter = BlockFilter;
class LogFilter {
}
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsArray)(),
    __metadata("design:type", Array)
], LogFilter.prototype, "topics", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], LogFilter.prototype, "address", void 0);
exports.LogFilter = LogFilter;
class ChainTypes {
}
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Object)
], ChainTypes.prototype, "types", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Object)
], ChainTypes.prototype, "typesAlias", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Object)
], ChainTypes.prototype, "typesBundle", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Object)
], ChainTypes.prototype, "typesChain", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Object)
], ChainTypes.prototype, "typesSpec", void 0);
exports.ChainTypes = ChainTypes;
class TransactionFilter {
}
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], TransactionFilter.prototype, "from", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], TransactionFilter.prototype, "to", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], TransactionFilter.prototype, "function", void 0);
exports.TransactionFilter = TransactionFilter;
class BlockHandler {
}
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.IsOptional)(),
    (0, class_transformer_1.Type)(() => BlockFilter),
    __metadata("design:type", BlockFilter)
], BlockHandler.prototype, "filter", void 0);
__decorate([
    (0, class_validator_1.IsEnum)(types_avalanche_1.AvalancheHandlerKind, { groups: [types_avalanche_1.AvalancheHandlerKind.Block] }),
    __metadata("design:type", String)
], BlockHandler.prototype, "kind", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], BlockHandler.prototype, "handler", void 0);
exports.BlockHandler = BlockHandler;
class CallHandler {
}
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.IsOptional)(),
    (0, class_transformer_1.Type)(() => TransactionFilter),
    __metadata("design:type", TransactionFilter)
], CallHandler.prototype, "filter", void 0);
__decorate([
    (0, class_validator_1.IsEnum)(types_avalanche_1.AvalancheHandlerKind, { groups: [types_avalanche_1.AvalancheHandlerKind.Call] }),
    __metadata("design:type", String)
], CallHandler.prototype, "kind", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], CallHandler.prototype, "handler", void 0);
exports.CallHandler = CallHandler;
class EventHandler {
}
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.IsOptional)(),
    (0, class_transformer_1.Type)(() => LogFilter),
    __metadata("design:type", LogFilter)
], EventHandler.prototype, "filter", void 0);
__decorate([
    (0, class_validator_1.IsEnum)(types_avalanche_1.AvalancheHandlerKind, { groups: [types_avalanche_1.AvalancheHandlerKind.Event] }),
    __metadata("design:type", String)
], EventHandler.prototype, "kind", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], EventHandler.prototype, "handler", void 0);
exports.EventHandler = EventHandler;
class CustomHandler {
}
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], CustomHandler.prototype, "kind", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], CustomHandler.prototype, "handler", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Object)
], CustomHandler.prototype, "filter", void 0);
exports.CustomHandler = CustomHandler;
class AvalancheMapping {
}
__decorate([
    (0, class_transformer_1.Transform)((params) => {
        const handlers = params.value;
        return handlers.map((handler) => {
            switch (handler.kind) {
                case types_avalanche_1.AvalancheHandlerKind.Event:
                    return (0, class_transformer_1.plainToClass)(EventHandler, handler);
                case types_avalanche_1.AvalancheHandlerKind.Call:
                    return (0, class_transformer_1.plainToClass)(CallHandler, handler);
                case types_avalanche_1.AvalancheHandlerKind.Block:
                    return (0, class_transformer_1.plainToClass)(BlockHandler, handler);
                default:
                    throw new Error(`handler ${handler.kind} not supported`);
            }
        });
    }),
    (0, class_validator_1.IsArray)(),
    (0, class_validator_1.ValidateNested)(),
    __metadata("design:type", Array)
], AvalancheMapping.prototype, "handlers", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], AvalancheMapping.prototype, "file", void 0);
exports.AvalancheMapping = AvalancheMapping;
class CustomMapping {
}
__decorate([
    (0, class_validator_1.IsArray)(),
    (0, class_transformer_1.Type)(() => CustomHandler),
    (0, class_validator_1.ValidateNested)(),
    __metadata("design:type", Array)
], CustomMapping.prototype, "handlers", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], CustomMapping.prototype, "file", void 0);
exports.CustomMapping = CustomMapping;
class RuntimeDataSourceBase {
}
__decorate([
    (0, class_validator_1.IsEnum)(types_avalanche_1.AvalancheDatasourceKind, { groups: [types_avalanche_1.AvalancheDatasourceKind.Runtime] }),
    __metadata("design:type", String)
], RuntimeDataSourceBase.prototype, "kind", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => AvalancheMapping),
    (0, class_validator_1.ValidateNested)(),
    __metadata("design:type", Object)
], RuntimeDataSourceBase.prototype, "mapping", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsInt)(),
    __metadata("design:type", Number)
], RuntimeDataSourceBase.prototype, "startBlock", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Map)
], RuntimeDataSourceBase.prototype, "assets", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Object)
], RuntimeDataSourceBase.prototype, "options", void 0);
exports.RuntimeDataSourceBase = RuntimeDataSourceBase;
class FileReferenceImpl {
}
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], FileReferenceImpl.prototype, "file", void 0);
exports.FileReferenceImpl = FileReferenceImpl;
class CustomDataSourceBase {
}
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], CustomDataSourceBase.prototype, "kind", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => CustomMapping),
    (0, class_validator_1.ValidateNested)(),
    __metadata("design:type", Object)
], CustomDataSourceBase.prototype, "mapping", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsInt)(),
    __metadata("design:type", Number)
], CustomDataSourceBase.prototype, "startBlock", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => FileReferenceImpl),
    (0, class_validator_1.ValidateNested)({ each: true }),
    __metadata("design:type", Map)
], CustomDataSourceBase.prototype, "assets", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => FileReferenceImpl),
    (0, class_validator_1.IsObject)(),
    __metadata("design:type", Object)
], CustomDataSourceBase.prototype, "processor", void 0);
exports.CustomDataSourceBase = CustomDataSourceBase;
//# sourceMappingURL=models.js.map