{"version":3,"file":"publish-controller.spec.js","sourceRoot":"","sources":["../../src/controller/publish-controller.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport childProcess from 'child_process';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport {promisify} from 'util';\nimport {NETWORK_FAMILY, ReaderFactory} from '@subql/common';\nimport {parseSubstrateProjectManifest, ProjectManifestV1_0_0Impl} from '@subql/common-substrate';\nimport {create} from 'ipfs-http-client';\nimport rimraf from 'rimraf';\nimport Build from '../commands/build';\nimport Codegen from '../commands/codegen';\nimport Publish from '../commands/publish';\nimport {\n  isProjectSpecV0_0_1,\n  isProjectSpecV1_0_0,\n  ProjectSpecBase,\n  ProjectSpecV0_0_1,\n  ProjectSpecV0_2_0,\n  ProjectSpecV1_0_0,\n} from '../types';\nimport {cloneProjectTemplate, fetchTemplates, prepare} from './init-controller';\nimport {uploadFile, uploadToIpfs} from './publish-controller';\n\nconst projectSpecV0_0_1: ProjectSpecV0_0_1 = {\n  name: 'mocked_starter',\n  repository: '',\n  endpoint: 'wss://rpc.polkadot.io/public-ws',\n  author: 'jay',\n  description: 'this is test for init controller',\n  version: '',\n  license: '',\n};\n\nconst projectSpecV0_2_0: ProjectSpecV0_2_0 = {\n  name: 'mocked_starter',\n  repository: '',\n  genesisHash: '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3',\n  endpoint: 'wss://rpc.polkadot.io/public-ws',\n  author: 'jay',\n  description: 'this is test for init controller',\n  version: '',\n  license: '',\n};\n\nexport const projectSpecV1_0_0: ProjectSpecV1_0_0 = {\n  name: 'mocked_starter',\n  repository: '',\n  chainId: '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3',\n  endpoint: 'wss://rpc.polkadot.io/public-ws',\n  author: 'jay',\n  description: 'this is test for init controller',\n  version: '',\n  license: '',\n  runner: {\n    node: {\n      name: '@subql/node',\n      version: '>=1.0.0',\n    },\n    query: {\n      name: '@subql/query',\n      version: '*',\n    },\n  },\n};\n\nconst ipfsEndpoint = 'http://localhost:5001/api/v0';\n// Replace/Update your access token when test locally\nconst testAuth = process.env.SUBQL_ACCESS_TOKEN;\n\njest.setTimeout(150000);\n\nexport async function createTestProject(projectSpec: ProjectSpecBase): Promise<string> {\n  const tmpdir = await fs.promises.mkdtemp(`${os.tmpdir()}${path.sep}`);\n  const projectDir = path.join(tmpdir, projectSpec.name);\n  const templates = await fetchTemplates();\n  const projectPath = await cloneProjectTemplate(tmpdir, projectSpec.name, templates[0]);\n  await prepare(projectPath, projectSpec);\n\n  // Install dependencies\n  childProcess.execSync(`npm i`, {cwd: projectDir});\n\n  await Codegen.run(['-l', projectDir]);\n  await Build.run(['-f', projectDir]);\n\n  return projectDir;\n}\n\ndescribe('Cli publish', () => {\n  let projectDir: string;\n\n  afterEach(async () => {\n    try {\n      await promisify(rimraf)(projectDir);\n    } catch (e) {\n      console.warn('Failed to clean up tmp dir after test');\n    }\n  });\n\n  it('should not allow uploading a v0.0.1 spec version project', async () => {\n    projectDir = await createTestProject(projectSpecV0_0_1);\n    await expect(uploadToIpfs('', ipfsEndpoint, projectDir)).rejects.toBeDefined();\n  });\n\n  it(`upload file to ipfs`, async () => {\n    // only enable when test locally\n    const ipfs = create({url: ipfsEndpoint});\n\n    //test string\n    const cid = await uploadFile('Test for upload string to ipfs', testAuth);\n    console.log(`upload file cid: ${cid}`);\n    // test fs stream (project)\n    projectDir = await createTestProject(projectSpecV0_2_0);\n    const fsStream = fs.createReadStream(path.resolve(projectDir, 'project.yaml'));\n    const cid2 = await uploadFile(fsStream, testAuth);\n    console.log(`upload file cid: ${cid2}`);\n  });\n\n  it('should upload appropriate project to IPFS', async () => {\n    projectDir = await createTestProject(projectSpecV0_2_0);\n    const cid = await uploadToIpfs(projectDir, testAuth);\n    expect(cid).toBeDefined();\n    // validation no longer required, as it is deployment object been published\n    // await expect(Validate.run(['-l', cid, '--ipfs', ipfsEndpoint])).resolves.toBe(undefined);\n  });\n\n  it('upload project from a manifest', async () => {\n    projectDir = await createTestProject(projectSpecV0_2_0);\n    const manifestPath = path.resolve(projectDir, 'project.yaml');\n    const testManifestPath = path.resolve(projectDir, 'test.yaml');\n    fs.renameSync(manifestPath, testManifestPath);\n    await Publish.run(['-f', testManifestPath]);\n  });\n\n  it('should not allow uploading a v0.0.1 spec version project', async () => {\n    projectDir = await createTestProject(projectSpecV0_0_1);\n    await expect(uploadToIpfs('', ipfsEndpoint, projectDir)).rejects.toBeDefined();\n  });\n\n  it('v1.0.0 should deploy', async () => {\n    projectDir = await createTestProject(projectSpecV1_0_0);\n    const reader = await ReaderFactory.create(projectDir);\n    const manifest = parseSubstrateProjectManifest(await reader.getProjectSchema()).asImpl;\n    expect((manifest as ProjectManifestV1_0_0Impl).runner).toBeDefined();\n  });\n\n  it('convert to deployment and removed descriptive field', async () => {\n    projectDir = await createTestProject(projectSpecV1_0_0);\n    const reader = await ReaderFactory.create(projectDir);\n    const manifest = parseSubstrateProjectManifest(await reader.getProjectSchema()).asImpl;\n    const deployment = manifest.toDeployment();\n    expect(deployment).not.toContain('author');\n    expect(deployment).not.toContain('endpoint');\n    expect(deployment).not.toContain('dictionary');\n    expect(deployment).not.toContain('description');\n    expect(deployment).not.toContain('repository');\n\n    expect(deployment).toContain('chainId');\n    expect(deployment).toContain('specVersion');\n    expect(deployment).toContain('dataSources');\n  });\n});\n"]}