{"version":3,"file":"init-controller.test.js","sourceRoot":"","sources":["../../src/controller/init-controller.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport * as fs from 'fs';\nimport path from 'path';\nimport {promisify} from 'util';\nimport {makeTempDir} from '@subql/common';\nimport rimraf from 'rimraf';\nimport {parseDocument, Document} from 'yaml';\nimport {isProjectSpecV0_2_0, isProjectSpecV1_0_0, ProjectSpecBase} from '../types';\nimport {\n  cloneProjectGit,\n  cloneProjectTemplate,\n  fetchTemplates,\n  prepare,\n  readDefaults,\n  Template,\n} from './init-controller';\n\nasync function testYAML(projectPath: string, project: ProjectSpecBase): Promise<{old: Document; new: Document}> {\n  const yamlPath = path.join(`${projectPath}`, `project.yaml`);\n  const manifest = await fs.promises.readFile(yamlPath, 'utf8');\n  const data = parseDocument(manifest);\n\n  const clonedData = data.clone();\n  clonedData.set('description', project.description ?? data.get('description'));\n  clonedData.set('repository', project.repository ?? '');\n\n  // network type should be collection\n  const network: any = clonedData.get('network');\n  network.set('endpoint', 'http://def not real endpoint');\n  clonedData.set('version', 'not real version');\n  clonedData.set('name', 'not real name');\n\n  if (isProjectSpecV1_0_0(project)) {\n    network.set('chainId', 'random chainId');\n  } else if (isProjectSpecV0_2_0(project)) {\n    network.set('genesisHash', 'random genesisHash');\n  }\n  return {\n    old: data,\n    new: clonedData,\n  };\n}\n\n// async\nconst fileExists = async (file: string): Promise<boolean> => {\n  return new Promise<boolean>((resolve, reject) => {\n    fs.access(file, fs.constants.F_OK, (err) => {\n      err ? reject(err) : resolve(true);\n    });\n  });\n};\n\njest.setTimeout(30000);\n\nconst projectSpec = {\n  name: 'mocked_starter',\n  repository: '',\n  endpoint: 'wss://rpc.polkadot.io/public-ws',\n  specVersion: '1.0.0',\n  author: 'jay',\n  description: 'this is test for init controller',\n  chainId: '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3',\n  version: '',\n  license: '',\n};\n\ndescribe('Cli can create project', () => {\n  it('should resolve when starter project created via template', async () => {\n    const tempPath = await makeTempDir();\n    const templates = await fetchTemplates();\n    const projectPath = await cloneProjectTemplate(tempPath, projectSpec.name, templates[0]);\n    await prepare(projectPath, projectSpec);\n    await expect(fileExists(path.join(tempPath, `${projectSpec.name}`))).resolves.toEqual(true);\n  });\n\n  it('should resolve when starter project created via git', async () => {\n    const tempPath = await makeTempDir();\n    const projectPath = await cloneProjectGit(\n      tempPath,\n      projectSpec.name,\n      'https://github.com/subquery/subql-starter',\n      'v1.0.0'\n    );\n    await prepare(projectPath, projectSpec);\n    await expect(fileExists(path.join(tempPath, `${projectSpec.name}`))).resolves.toEqual(true);\n  });\n\n  it('throw error if .git exists in starter project', async () => {\n    const tempPath = await makeTempDir();\n    const templates = await fetchTemplates();\n    const projectPath = await cloneProjectTemplate(tempPath, projectSpec.name, templates[0]);\n    await prepare(projectPath, projectSpec);\n    await expect(fileExists(path.join(tempPath, `${projectSpec.name}/.git`))).rejects.toThrow();\n  });\n  it('YAML contains comments', async () => {\n    const tempPath = await makeTempDir();\n    const templates = await fetchTemplates();\n    const projectPath = await cloneProjectTemplate(tempPath, projectSpec.name, templates[0]);\n    const output = await testYAML(projectPath, projectSpec);\n    expect(output.new.toJS().network.chainId).toBe('random chainId');\n    expect(output.new).not.toEqual(output.old);\n    expect(output.new.toString()).toContain('# The genesis hash of the network (hash of block 0)');\n\n    await promisify(rimraf)(tempPath);\n  });\n\n  it('prepare correctly applies project details', async () => {\n    const tempPath = await makeTempDir();\n    const templates = await fetchTemplates();\n    const template = templates.find(({name}) => name.toLowerCase() === 'polkadot-starter');\n    const projectPath = await cloneProjectTemplate(tempPath, projectSpec.name, template);\n    await prepare(projectPath, projectSpec);\n    const [specVersion, repository, endpoint, author, version, description, license] = await readDefaults(projectPath);\n    expect(projectSpec.specVersion).toEqual(specVersion);\n    expect(projectSpec.repository).toEqual(repository);\n    expect(projectSpec.endpoint).toEqual(endpoint);\n    expect(projectSpec.author).toEqual(author);\n    expect(projectSpec.version).toEqual(version);\n    expect(projectSpec.description).toEqual(description);\n    expect(projectSpec.license).toEqual(license);\n  });\n\n  it('allow git from sub directory', async () => {\n    const tempPath = await makeTempDir();\n\n    const template: Template = {\n      remote: 'https://github.com/subquery/subql-starter',\n      family: 'Substrate',\n      branch: 'main',\n      network: 'Polkadot',\n      name: 'Polkadot-starter',\n      description: '',\n    };\n\n    const projectPath = await cloneProjectTemplate(tempPath, projectSpec.name, template);\n    await prepare(projectPath, projectSpec);\n    await expect(fileExists(path.join(tempPath, `${projectSpec.name}`))).resolves.toEqual(true);\n  }, 5000000);\n});\n"]}