{"version":3,"file":"deploy-controller.spec.js","sourceRoot":"","sources":["../../src/controller/deploy-controller.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {ROOT_API_URL_DEV} from '../constants';\nimport {DeploymentDataType, DeploymentSpec, ValidateDataType} from '../types';\nimport {delay} from '../utils';\nimport {\n  deployToHostedService,\n  promoteDeployment,\n  deleteDeployment,\n  deploymentStatus,\n  ipfsCID_validate,\n  networkEndpoints,\n  dictionaryEndpoints,\n  imageVersions,\n  processEndpoints,\n  redeploy,\n  projectsInfo,\n} from './deploy-controller';\nimport {createProject, deleteProject} from './project-controller';\n\njest.setTimeout(120000);\nconst projectSpec: DeploymentSpec = {\n  org: process.env.SUBQL_ORG_TEST,\n  projectName: 'mockedstarter',\n  repository: 'https://github.com/bz888/test-deployment-2',\n  ipfs: 'QmaVh8DGzuRCJZ5zYEDxXQsXYqP9HihjjeuxNNteSDq8xX',\n  subtitle: '',\n  description: '',\n  logoURl: '',\n  apiVersion: '2',\n  type: 'stage',\n};\n\nasync function deployTestProject(\n  validator: ValidateDataType,\n  ipfs: string,\n  org: string,\n  project_name: string,\n  testAuth: string,\n  url: string\n): Promise<DeploymentDataType> {\n  const indexerV = await imageVersions(\n    validator.manifestRunner.node.name,\n    validator.manifestRunner.node.version,\n    testAuth,\n    url\n  );\n  const queryV = await imageVersions(\n    validator.manifestRunner.query.name,\n    validator.manifestRunner.query.version,\n    testAuth,\n    url\n  );\n  const endpoint = await networkEndpoints(url);\n  const dictEndpoint = await dictionaryEndpoints(url);\n  return deployToHostedService(\n    org,\n    project_name,\n    testAuth,\n    ipfs,\n    indexerV[0],\n    queryV[0],\n    processEndpoints(endpoint, validator.chainId),\n    projectSpec.type,\n    processEndpoints(dictEndpoint, validator.chainId),\n    {},\n    {},\n    url\n  );\n}\n\nconst describeIf = (condition: boolean, ...args: Parameters<typeof describe>) =>\n  condition ? describe(...args) : describe.skip(...args);\n\n// Replace/Update your access token when test locally\nconst testAuth = process.env.SUBQL_ACCESS_TOKEN_TEST;\n\ndescribeIf(!!testAuth, 'CLI deploy, delete, promote', () => {\n  beforeAll(async () => {\n    const {apiVersion, description, logoURl, org, projectName, repository, subtitle} = projectSpec;\n    try {\n      await createProject(\n        org,\n        subtitle,\n        logoURl,\n        projectName,\n        testAuth,\n        repository,\n        description,\n        apiVersion,\n        undefined,\n        ROOT_API_URL_DEV\n      );\n    } catch (e) {\n      console.warn(`Failed at create project ${projectName} ${e}`);\n    }\n  });\n\n  afterAll(async () => {\n    try {\n      await deleteProject(testAuth, projectSpec.org, projectSpec.projectName, ROOT_API_URL_DEV);\n    } catch (e) {\n      console.warn('Failed to delete project', e);\n    }\n  });\n\n  it('Deploy to Hosted Service and Delete', async () => {\n    const {ipfs, org, projectName} = projectSpec;\n\n    const validator = await ipfsCID_validate(ipfs, testAuth, ROOT_API_URL_DEV);\n    const deploy_output = await deployTestProject(validator, ipfs, org, projectName, testAuth, ROOT_API_URL_DEV);\n\n    const del_output = await deleteDeployment(org, projectName, testAuth, deploy_output.id, ROOT_API_URL_DEV);\n    expect(typeof deploy_output.id).toBe('number');\n    expect(+del_output).toBe(deploy_output.id);\n  });\n\n  // Only test locally\n  it.skip('Promote Deployment', async () => {\n    const {ipfs, org, projectName} = projectSpec;\n    let status: string;\n    let attempt = 0;\n    const validator = await ipfsCID_validate(ipfs, testAuth, ROOT_API_URL_DEV);\n    const deployOutput = await deployTestProject(validator, ipfs, org, projectName, testAuth, ROOT_API_URL_DEV);\n    while (status !== 'running') {\n      if (attempt >= 5) break;\n      attempt = attempt + 1;\n      await delay(30);\n      status = await deploymentStatus(org, projectName, testAuth, deployOutput.id, ROOT_API_URL_DEV);\n      if (status === 'running') {\n        const promoteOutput = await promoteDeployment(org, projectName, testAuth, deployOutput.id, ROOT_API_URL_DEV);\n        expect(+promoteOutput).toBe(deployOutput.id);\n      }\n    }\n  });\n  it('should return true for valid ipfsCID', async () => {\n    const validator = await ipfsCID_validate(projectSpec.ipfs, testAuth, ROOT_API_URL_DEV);\n    expect(validator.valid).toBe(true);\n  });\n  it('to throw error for invalid ipfsCID', async () => {\n    try {\n      await ipfsCID_validate('fake', testAuth, ROOT_API_URL_DEV);\n    } catch (e) {\n      expect(e.message).toBe('Failed to validate IPFS CID: fake is not a valid subquery deployment id!');\n    }\n  });\n\n  it('get Endpoint - polkadot', async () => {\n    const validator = await ipfsCID_validate(projectSpec.ipfs, testAuth, ROOT_API_URL_DEV);\n    const endpoints = await networkEndpoints(ROOT_API_URL_DEV);\n    expect(processEndpoints(endpoints, validator.chainId)).toBe('wss://polkadot.api.onfinality.io/public-ws');\n  });\n  it('get DictEndpoint - polkadot', async () => {\n    const validator = await ipfsCID_validate(projectSpec.ipfs, testAuth, ROOT_API_URL_DEV);\n    const dict = await dictionaryEndpoints(ROOT_API_URL_DEV);\n    expect(processEndpoints(dict, validator.chainId)).toBe(\n      'https://api.subquery.network/sq/subquery/polkadot-dictionary'\n    );\n  });\n  it('reDeploy to Hosted Service', async () => {\n    const {ipfs, org, projectName, type} = projectSpec;\n    const newIPFS = 'QmbKvrzwSmzTZi5jrhEpa6yDDHQXRURi5S4ztLgJLpBxAi';\n    const validator = await ipfsCID_validate(projectSpec.ipfs, testAuth, ROOT_API_URL_DEV);\n\n    const deployOutput = await deployTestProject(validator, ipfs, org, projectName, testAuth, ROOT_API_URL_DEV);\n    const initProjectInfo = await projectsInfo(testAuth, org, projectName, ROOT_API_URL_DEV, type);\n\n    const endpoints = await networkEndpoints(ROOT_API_URL_DEV);\n    const dict = await dictionaryEndpoints(ROOT_API_URL_DEV);\n    const indexerV = await imageVersions(\n      validator.manifestRunner.node.name,\n      validator.manifestRunner.node.version,\n      testAuth,\n      ROOT_API_URL_DEV\n    );\n    const queryV = await imageVersions(\n      validator.manifestRunner.query.name,\n      validator.manifestRunner.query.version,\n      testAuth,\n      ROOT_API_URL_DEV\n    );\n\n    await redeploy(\n      org,\n      projectName,\n      deployOutput.id,\n      testAuth,\n      newIPFS,\n      processEndpoints(endpoints, validator.chainId),\n      processEndpoints(dict, validator.chainId),\n      indexerV[0],\n      queryV[0],\n      {},\n      {},\n      ROOT_API_URL_DEV\n    );\n    const updatedInfo = await projectsInfo(testAuth, org, projectName, ROOT_API_URL_DEV, type);\n\n    expect(updatedInfo.id).toBe(initProjectInfo.id);\n    expect(updatedInfo.version).not.toEqual(deployOutput.version);\n  });\n});\n"]}