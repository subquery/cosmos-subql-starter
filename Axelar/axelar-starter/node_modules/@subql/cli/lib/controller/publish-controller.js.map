{"version":3,"file":"publish-controller.js","sourceRoot":"","sources":["../../src/controller/publish-controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {ReaderFactory, IPFS_CLUSTER_ENDPOINT, getProjectRootAndManifest} from '@subql/common';\nimport {parseAlgorandProjectManifest} from '@subql/common-algorand';\nimport {parseSubstrateProjectManifest as parseAvalancheProjectManifest} from '@subql/common-avalanche';\nimport {parseCosmosProjectManifest} from '@subql/common-cosmos';\nimport {parseEthereumProjectManifest} from '@subql/common-ethereum';\nimport {parseEthereumProjectManifest as parseFlareProjectManifest} from '@subql/common-flare';\nimport {parseSubstrateProjectManifest, manifestIsV0_0_1} from '@subql/common-substrate';\nimport {parseTerraProjectManifest} from '@subql/common-terra';\nimport {FileReference} from '@subql/types';\nimport axios from 'axios';\nimport FormData from 'form-data';\nimport {IPFSHTTPClient, create} from 'ipfs-http-client';\n\nexport async function createIPFSFile(projectPath: string, cid: string): Promise<void> {\n  const filePath = getProjectRootAndManifest(projectPath);\n  const {name} = path.parse(filePath.manifest);\n  const MANIFEST_FILE = path.join(filePath.root, `.${name}-cid`);\n  try {\n    await fs.promises.writeFile(MANIFEST_FILE, cid, 'utf8');\n  } catch (e) {\n    throw new Error(`Failed to create CID file: ${e}`);\n  }\n}\n\nexport async function uploadToIpfs(projectPath: string, authToken: string, ipfsEndpoint?: string): Promise<string> {\n  const reader = await ReaderFactory.create(projectPath);\n  let manifest;\n  const schema = await reader.getProjectSchema();\n  //substrate\n  try {\n    manifest = parseSubstrateProjectManifest(schema).asImpl;\n    if (manifestIsV0_0_1(manifest)) {\n      throw new Error('Unsupported project manifest spec, only 0.2.0 or greater is supported');\n    }\n  } catch (e) {\n    //terra\n    try {\n      manifest = parseTerraProjectManifest(schema).asImpl;\n    } catch (e) {\n      // cosmos\n      try {\n        manifest = parseCosmosProjectManifest(schema).asImpl;\n      } catch (e) {\n        //avalanche\n        try {\n          manifest = parseAvalancheProjectManifest(schema).asImpl;\n        } catch (e) {\n          // algorand\n          try {\n            manifest = parseAlgorandProjectManifest(schema).asImpl;\n          } catch (e) {\n            try {\n              manifest = parseEthereumProjectManifest(schema).asImpl;\n            } catch (e) {\n              try {\n                manifest = parseFlareProjectManifest(schema).asImpl;\n              } catch (e) {\n                throw new Error('Unable to pass project manifest');\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  let ipfs: IPFSHTTPClient;\n  if (ipfsEndpoint) {\n    ipfs = create({url: ipfsEndpoint});\n  }\n  const deployment = await replaceFileReferences(reader.root, manifest, authToken, ipfs);\n  // Upload schema\n  return uploadFile(deployment.toDeployment(), authToken, ipfs);\n}\n\n/* Recursively finds all FileReferences in an object and replaces the files with IPFS references */\nasync function replaceFileReferences<T>(\n  projectDir: string,\n  input: T,\n  authToken: string,\n  ipfs?: IPFSHTTPClient\n): Promise<T> {\n  if (Array.isArray(input)) {\n    return (await Promise.all(\n      input.map((val) => replaceFileReferences(projectDir, val, authToken, ipfs))\n    )) as unknown as T;\n  } else if (typeof input === 'object' && input !== null) {\n    if (input instanceof Map) {\n      input = mapToObject(input) as T;\n    }\n    if (isFileReference(input)) {\n      input.file = await uploadFile(fs.createReadStream(path.resolve(projectDir, input.file)), authToken, ipfs).then(\n        (cid) => `ipfs://${cid}`\n      );\n    }\n    const keys = Object.keys(input) as unknown as (keyof T)[];\n    await Promise.all(\n      keys.map(async (key) => {\n        // this is the loop\n        input[key] = await replaceFileReferences(projectDir, input[key], authToken, ipfs);\n      })\n    );\n  }\n\n  return input;\n}\n\nconst fileMap = new Map<string | fs.ReadStream, string>();\n\nexport async function uploadFile(\n  content: string | fs.ReadStream,\n  authToken: string,\n  ipfs?: IPFSHTTPClient\n): Promise<string> {\n  let ipfsClientCid: string;\n  if (ipfs) {\n    try {\n      ipfsClientCid = (await ipfs.add(content, {pin: true, cidVersion: 0})).cid.toString();\n    } catch (e) {\n      throw new Error(`Publish project to provided IPFS gateway failed, ${e}`);\n    }\n  }\n  let ipfsClusterCid: string;\n  try {\n    if (fileMap.has(content)) {\n      ipfsClusterCid = fileMap.get(content);\n    } else {\n      ipfsClusterCid = await uploadFileByCluster(\n        determineStringOrFsStream(content) ? await fs.promises.readFile(content.path, 'utf8') : content,\n        authToken\n      );\n      fileMap.set(content, ipfsClusterCid);\n    }\n  } catch (e) {\n    throw new Error(`Publish project to default cluster failed, ${e}`);\n  }\n  // Validate IPFS cid\n  if (ipfsClientCid && ipfsClientCid !== ipfsClusterCid) {\n    throw new Error(`Published and received IPFS cid not identical \\n,\n    IPFS gateway: ${ipfsClientCid}, IPFS cluster: ${ipfsClusterCid}`);\n  }\n  return ipfsClusterCid;\n}\n\nfunction determineStringOrFsStream(toBeDetermined: unknown): toBeDetermined is fs.ReadStream {\n  return !!(toBeDetermined as fs.ReadStream).path;\n}\n\nasync function uploadFileByCluster(content: string, authToken: string): Promise<string> {\n  const bodyFormData = new FormData();\n  bodyFormData.append('data', content);\n  const result = (\n    await axios({\n      headers: {\n        Authorization: `Bearer ${authToken}`,\n        'Content-Type': 'multipart/form-data',\n        ...bodyFormData.getHeaders(),\n      },\n      method: 'post',\n      url: IPFS_CLUSTER_ENDPOINT,\n      data: bodyFormData,\n      maxBodyLength: 50 * 1024 * 1024, //50 MB\n      maxContentLength: 50 * 1024 * 1024,\n    })\n  ).data as ClusterResponseData;\n\n  if (typeof result.cid === 'string') {\n    return result.cid;\n  }\n  const cid = result.cid?.['/'];\n\n  if (!cid) {\n    throw new Error('Failed to get CID from response');\n  }\n\n  return cid;\n}\n\nfunction mapToObject(map: Map<string | number, unknown>): Record<string | number, unknown> {\n  // XXX can use Object.entries with newer versions of node.js\n  const assetsObj: Record<string, unknown> = {};\n  for (const key of map.keys()) {\n    assetsObj[key] = map.get(key);\n  }\n  return assetsObj;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isFileReference(value: any): value is FileReference {\n  return value?.file && typeof value.file === 'string';\n}\n\ninterface ClusterResponseData {\n  name: string;\n  cid: CidSpec | string;\n  size: number;\n}\n// cluster response cid stored as {'/': 'QmVq2bqunmkmEmMCY3x9U9kDcgoRBGRbuBm5j7XKZDvSYt'}\ninterface CidSpec {\n  '/': string;\n}\n"]}