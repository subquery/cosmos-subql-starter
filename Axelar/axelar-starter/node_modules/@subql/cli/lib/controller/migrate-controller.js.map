{"version":3,"file":"migrate-controller.js","sourceRoot":"","sources":["../../src/controller/migrate-controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {ProjectManifestV1_0_0} from '@subql/common';\nimport {\n  SubstrateProjectManifestVersioned,\n  ProjectNetworkV0_0_1,\n  ChainTypes,\n  loadSubstrateProjectManifest,\n} from '@subql/common-substrate';\nimport {loadTerraProjectManifest, TerraProjectManifestVersioned} from '@subql/common-terra';\nimport {classToPlain} from 'class-transformer';\nimport {cli} from 'cli-ux';\nimport inquirer from 'inquirer';\nimport yaml from 'js-yaml';\nimport {getGenesisHash} from '../jsonrpc';\nimport {ProjectSpecV1_0_0} from '../types';\n\nconst MANIFEST_PATH = 'project.yaml';\nconst MANIFEST_OLD = `project_old.yaml`;\nconst MANIFEST_V_1_0_0 = `project_1_0_0.yaml`;\nconst SUBSTRATE_NODE_NAME = '@subql/node';\nconst TERRA_NODE_NAME = '@subql/node-terra';\nconst DEFAULT_QUERY_NAME = '@subql/query';\n\n// eslint-disable-next-line complexity\nexport async function prepare(\n  location: string,\n  manifest: SubstrateProjectManifestVersioned | TerraProjectManifestVersioned\n): Promise<[ProjectSpecV1_0_0, string]> {\n  const packageData = await fs.promises.readFile(`${location}/package.json`, 'utf8');\n  const jsonProjectData = JSON.parse(packageData);\n  let chainTypesRelativePath: string;\n  const project = {runner: {node: {}, query: {}}} as ProjectSpecV1_0_0;\n  const projectNetwork =\n    manifest instanceof SubstrateProjectManifestVersioned && manifest.isV0_0_1\n      ? manifest.asV0_0_1.network\n      : manifest.asV1_0_0.network;\n  project.name = await cli.prompt('Project name', {default: jsonProjectData.name, required: true});\n  project.version = await cli.prompt('Project version', {default: jsonProjectData.version, required: true});\n  project.runner.node = await inquirer.prompt([\n    {\n      name: 'name', //equivalent to project.runner.node.name\n      message: 'select Runner Node spec',\n      type: 'list',\n      choices: [{name: SUBSTRATE_NODE_NAME}, {name: TERRA_NODE_NAME}],\n    },\n  ]);\n  project.runner.node.version = await cli.prompt('Runner node version', {required: true});\n  project.runner.query = await inquirer.prompt([\n    {\n      name: 'name',\n      message: 'select Runner Query spec',\n      type: 'list',\n      choices: [{name: DEFAULT_QUERY_NAME}],\n    },\n  ]);\n  project.runner.query.version = await cli.prompt('Runner query version', {required: true});\n\n  let genesisHash: string;\n  if (project.runner.node.name === SUBSTRATE_NODE_NAME) {\n    cli.action.start('Getting network genesis hash from endpoint for Chain ID');\n    try {\n      genesisHash = await getGenesisHash(projectNetwork.endpoint);\n    } catch (e) {\n      genesisHash = null;\n    }\n    cli.action.stop();\n  }\n  project.chainId = await cli.prompt('Please provide Chain ID', {default: genesisHash ?? null, required: true});\n\n  if (manifest instanceof SubstrateProjectManifestVersioned) {\n    if (manifest.isV0_0_1) {\n      const projectV1Network = manifest.asV0_0_1.network;\n      if (\n        projectV1Network.types ||\n        projectV1Network.typesAlias ||\n        projectV1Network.typesBundle ||\n        projectV1Network.typesChain ||\n        projectV1Network.typesSpec\n      ) {\n        chainTypesRelativePath = await cli.prompt('Please provide network chain types path', {\n          default: './types.json',\n          required: true,\n        });\n        const {ext} = path.parse(chainTypesRelativePath);\n        if (ext !== '.yaml' && ext !== '.yml' && ext !== '.json') {\n          throw new Error(`Extension ${ext} not supported`);\n        }\n        const projectChainTypesPath = path.join(location, chainTypesRelativePath);\n        //check if the file path is exist, if not create one\n        if (fs.existsSync(projectChainTypesPath)) {\n          if (await cli.confirm(`${projectChainTypesPath} already exist, do you want override it [Y/N]`)) {\n            await createChainTypes(projectV1Network, projectChainTypesPath, ext);\n          }\n        } else {\n          await createChainTypes(projectV1Network, projectChainTypesPath, ext);\n        }\n      }\n      //Patch manifest here\n      for (const dataSource of manifest.asV1_0_0.dataSources) {\n        dataSource.mapping.file = await cli.prompt(\n          `Please provide relative entry path for dataSource ${dataSource.name}'s mapping `,\n          {\n            default: jsonProjectData.main.toString().startsWith('./')\n              ? jsonProjectData.main\n              : `./${jsonProjectData.main}`,\n            required: true,\n          }\n        );\n        delete dataSource.name;\n        const handlers = dataSource.mapping.handlers;\n        delete dataSource.mapping.handlers; // adjust position\n        dataSource.mapping.handlers = handlers;\n      }\n    } else {\n      // handle chainTypes path as v0.2.0\n      if (manifest.asV0_2_0.network.chaintypes) {\n        chainTypesRelativePath = manifest.asV0_2_0.network.chaintypes.file;\n      }\n    }\n  }\n  return [project, chainTypesRelativePath];\n}\n\nexport async function migrate(\n  projectPath: string,\n  project: ProjectSpecV1_0_0,\n  manifest: SubstrateProjectManifestVersioned | TerraProjectManifestVersioned,\n  chainTypes?: string\n): Promise<void> {\n  const originManifestPath = path.join(projectPath, MANIFEST_PATH);\n  const manifestOld = path.join(projectPath, MANIFEST_OLD);\n  const manifestV1_0_0 = path.join(projectPath, MANIFEST_V_1_0_0);\n\n  try {\n    const data = {} as ProjectManifestV1_0_0;\n    data.specVersion = '1.0.0';\n    data.name = project.name;\n    data.version = project.version;\n    data.runner = project.runner;\n    data.description = manifest.asV1_0_0.description ?? '';\n    data.repository = manifest.asV1_0_0.repository ?? '';\n    if (manifest instanceof SubstrateProjectManifestVersioned) {\n      data.schema = manifest.isV0_0_1 ? {file: manifest.asV0_0_1.schema} : manifest.asV1_0_0.schema;\n    } else if (manifest instanceof TerraProjectManifestVersioned) {\n      data.schema = manifest.asV1_0_0.schema;\n    }\n    data.network = {\n      chainId: project.chainId,\n      endpoint: manifest.asV1_0_0.network.endpoint,\n    };\n    if (manifest.asV1_0_0.network.dictionary) {\n      data.network.dictionary = manifest.asV1_0_0.network.dictionary;\n    }\n    if (chainTypes) {\n      data.network.chaintypes = {file: chainTypes};\n    }\n    data.dataSources = manifest.asV1_0_0.dataSources as any; //TODO, fix this type as extend BaseDataSource\n    manifest instanceof SubstrateProjectManifestVersioned && manifest.asV1_0_0.templates\n      ? (data.templates = manifest.asV1_0_0.templates)\n      : delete data.templates;\n\n    const newYaml = yaml.dump(classToPlain(data));\n    await fs.promises.writeFile(manifestV1_0_0, newYaml, 'utf8');\n  } catch (e) {\n    throw new Error(`Failed to create manifest : ${e}`);\n  }\n  //validate before backup and conversion\n  try {\n    loadSubstrateProjectManifest(manifestV1_0_0).isV1_0_0;\n  } catch (e) {\n    try {\n      loadTerraProjectManifest(manifestV1_0_0).isV1_0_0;\n    } catch (e) {\n      console.error(`${manifestV1_0_0} failed validation for manifest spec 1.0.0, \\n ${e}`);\n      const keep = await cli.confirm(`However, do you want keep ${manifestV1_0_0} for inspection before retry? [Y/N]`);\n      if (keep) {\n        process.exit(0);\n      } else {\n        await fs.promises.unlink(manifestV1_0_0);\n        process.exit(0);\n      }\n    }\n  }\n  //conversion\n  await conversion(originManifestPath, manifestOld, manifestV1_0_0);\n}\n\nasync function conversion(originManifestPath: string, manifestOld: string, manifestV1_0_0: string): Promise<void> {\n  try {\n    await fs.promises.rename(originManifestPath, manifestOld);\n  } catch (e) {\n    throw new Error(`Failed convert ${originManifestPath} to ${manifestOld},${e}`);\n  }\n  try {\n    await fs.promises.rename(manifestV1_0_0, originManifestPath);\n  } catch (e) {\n    throw new Error(`Failed convert ${manifestV1_0_0} to ${originManifestPath},${e}`);\n  }\n}\n\nexport async function createChainTypes(\n  projectV1Network: ProjectNetworkV0_0_1,\n  absolutePath: string,\n  ext: string\n): Promise<void> {\n  const data = {} as ChainTypes;\n  if (projectV1Network.types) data.types = projectV1Network.types;\n  if (projectV1Network.typesBundle) data.typesBundle = projectV1Network.typesBundle;\n  if (projectV1Network.typesAlias) data.typesAlias = projectV1Network.typesAlias;\n  if (projectV1Network.typesChain) data.typesChain = projectV1Network.typesChain;\n  if (projectV1Network.typesSpec) data.typesChain = projectV1Network.typesSpec;\n\n  if (ext === '.json') {\n    await fs.promises.writeFile(absolutePath, JSON.stringify(data, null, 2));\n  } else {\n    await fs.promises.writeFile(absolutePath, yaml.dump(data), 'utf8');\n  }\n  console.log(`* chainTypes is created`);\n}\n"]}