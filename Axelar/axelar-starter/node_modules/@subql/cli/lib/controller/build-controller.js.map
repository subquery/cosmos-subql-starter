{"version":3,"file":"build-controller.js","sourceRoot":"","sources":["../../src/controller/build-controller.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;AAGtC,8DAA+C;AAC/C,iDAAoC;AAEpC,MAAM,aAAa,GAAG,CACpB,YAAoC,EACpC,UAAkB,EAClB,SAAiB,EACjB,WAAqB,EACE,EAAE,CAAC,CAAC;IAC3B,MAAM,EAAE,MAAM;IACd,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,YAAY;IAChD,OAAO,EAAE,UAAU;IACnB,KAAK,EAAE,YAAY;IACnB,OAAO,EAAE,WAAW,IAAI,mBAAmB;IAC3C,MAAM,EAAE;QACN,KAAK,EAAE;YACL;gBACE,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,cAAc;gBACvB,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC;gBACpC,OAAO,EAAE;oBACP,eAAe,EAAE;wBACf,WAAW,EAAE,KAAK;qBACnB;iBACF;aACF;YACD;gBACE,IAAI,EAAE,UAAU;gBAChB,GAAG,EAAE,aAAa;aACnB;SACF;KACF;IAED,OAAO,EAAE;QACP,UAAU,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC;KAC5C;IAED,MAAM,EAAE;QACN,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,WAAW;QACrB,aAAa,EAAE,UAAU;KAC1B;CACF,CAAC,CAAC;AAEI,KAAK,UAAU,UAAU,CAC9B,YAAoC,EACpC,UAAkB,EAClB,SAAiB,EACjB,KAAK,GAAG,KAAK,EACb,KAAK,GAAG,KAAK;IAEb,MAAM,MAAM,GAAG,IAAA,qBAAK,EAClB,aAAa,CAAC,YAAY,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,CAAC,EACzD,EAAC,MAAM,EAAE,EAAC,KAAK,EAAC,EAAC;IACjB,qDAAqD;KACtD,CAAC;IAEF,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACpC,IAAA,iBAAO,EAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACnC,IAAI,KAAK,EAAE;gBACT,MAAM,CAAC,KAAK,CAAC,CAAC;gBACd,OAAO;aACR;YAED,IAAI,KAAK,CAAC,SAAS,EAAE,EAAE;gBACrB,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;gBAE5B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;gBAC/B,OAAO;aACR;YAED,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AA9BD,gCA8BC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport childProcess from 'child_process';\nimport webpack, {Configuration} from 'webpack';\nimport {merge} from 'webpack-merge';\n\nconst getBaseConfig = (\n  buildEntries: Configuration['entry'],\n  projectDir: string,\n  outputDir: string,\n  development?: boolean\n): webpack.Configuration => ({\n  target: 'node',\n  mode: development ? 'development' : 'production',\n  context: projectDir,\n  entry: buildEntries,\n  devtool: development && 'inline-source-map',\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        exclude: /node_modules/,\n        loader: require.resolve('ts-loader'),\n        options: {\n          compilerOptions: {\n            declaration: false,\n          },\n        },\n      },\n      {\n        test: /\\.ya?ml$/,\n        use: 'yaml-loader',\n      },\n    ],\n  },\n\n  resolve: {\n    extensions: ['.tsx', '.ts', '.js', '.json'],\n  },\n\n  output: {\n    path: outputDir,\n    filename: '[name].js',\n    libraryTarget: 'commonjs',\n  },\n});\n\nexport async function runWebpack(\n  buildEntries: Configuration['entry'],\n  projectDir: string,\n  outputDir: string,\n  isDev = false,\n  clean = false\n): Promise<void> {\n  const config = merge(\n    getBaseConfig(buildEntries, projectDir, outputDir, isDev),\n    {output: {clean}}\n    // Can allow projects to override webpack config here\n  );\n\n  await new Promise((resolve, reject) => {\n    webpack(config).run((error, stats) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      if (stats.hasErrors()) {\n        const info = stats.toJson();\n\n        reject(info.errors[0].message);\n        return;\n      }\n\n      resolve(true);\n    });\n  });\n}\n"]}