import { DeploymentDataType, IndexerAdvancedOpts, ProjectDataType, QueryAdvancedOpts, ValidateDataType } from '../types';
export declare function deployToHostedService(org: string, projectName: string, authToken: string, ipfsCID: string, indexerImageVersion: string, queryImageVersion: string, endpoint: string, type: string, dictEndpoint: string, query: QueryAdvancedOpts, indexer: IndexerAdvancedOpts, url: string): Promise<DeploymentDataType>;
export declare function promoteDeployment(org: string, projectName: string, authToken: string, deploymentId: number, url: string): Promise<string>;
export declare function deleteDeployment(org: string, projectName: string, authToken: string, deploymentId: number, url: string): Promise<string>;
export declare function deploymentStatus(org: string, projectName: string, authToken: string, deployID: number, url: string): Promise<string>;
export declare function projectsInfo(authToken: string, org: string, projectName: string, url: string, type: string): Promise<ProjectDataType>;
export declare function redeploy(org: string, projectName: string, deployID: number, authToken: string, ipfsCID: string, endpoint: string, dictEndpoint: string, indexerVersion: string, queryVersion: string, query: QueryAdvancedOpts, indexer: IndexerAdvancedOpts, url: string): Promise<void>;
export declare function ipfsCID_validate(cid: string, authToken: string, url: string): Promise<ValidateDataType>;
export declare function dictionaryEndpoints(url: string): Promise<EndpointType[]>;
export declare function networkEndpoints(url: string): Promise<EndpointType[]>;
export declare function processEndpoints(endpoints: EndpointType[], chainId: string): string | undefined;
export declare function imageVersions(name: string, version: string, authToken: string, url: string): Promise<string[]>;
interface EndpointType {
    network: string;
    endpoint: string;
    chainId: string;
}
export {};
