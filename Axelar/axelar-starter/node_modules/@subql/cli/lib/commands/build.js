"use strict";
// Copyright 2020-2022 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = require("fs");
const path_1 = tslib_1.__importDefault(require("path"));
const core_1 = require("@oclif/core");
const build_controller_1 = require("../controller/build-controller");
class Build extends core_1.Command {
    async run() {
        var _a;
        try {
            const { flags } = await this.parse(Build);
            const directory = flags.location ? path_1.default.resolve(flags.location) : process.cwd();
            const isDev = flags.mode === 'development' || flags.mode === 'dev';
            if (!(0, fs_1.lstatSync)(directory).isDirectory()) {
                this.error('Argument `location` is not a valid directory');
            }
            // Get the output location from the project package.json main field
            const pjson = JSON.parse((0, fs_1.readFileSync)(path_1.default.join(directory, 'package.json')).toString());
            const defaultEntry = path_1.default.join(directory, 'src/index.ts');
            const outputDir = path_1.default.resolve(directory, (_a = flags.output) !== null && _a !== void 0 ? _a : 'dist');
            let buildEntries = {};
            buildEntries.index = defaultEntry;
            if (pjson.exports && typeof pjson.exports !== 'string') {
                buildEntries = Object.entries(pjson.exports).reduce((acc, [key, value]) => {
                    acc[key] = path_1.default.resolve(directory, value);
                    return acc;
                }, Object.assign({}, buildEntries));
            }
            for (const i in buildEntries) {
                if (typeof buildEntries[i] !== 'string') {
                    this.warn(`Ignoring entry ${i} from build.`);
                    delete buildEntries[i];
                }
            }
            await (0, build_controller_1.runWebpack)(buildEntries, directory, outputDir, isDev, true);
            if (!flags.slient) {
                this.log('Building and packing code ...');
                this.log('Done!');
            }
        }
        catch (e) {
            this.error(e);
        }
    }
}
exports.default = Build;
Build.description = 'Build this SubQuery project code';
Build.flags = {
    location: core_1.Flags.string({ char: 'f', description: 'local folder' }),
    output: core_1.Flags.string({ char: 'o', description: 'output folder of build e.g. dist' }),
    mode: core_1.Flags.enum({ options: ['production', 'prod', 'development', 'dev'], default: 'production' }),
    slient: core_1.Flags.boolean({ char: 's', description: 'silent mode' }),
};
//# sourceMappingURL=build.js.map