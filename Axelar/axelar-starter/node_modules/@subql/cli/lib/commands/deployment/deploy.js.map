{"version":3,"file":"deploy.js","sourceRoot":"","sources":["../../../src/commands/deployment/deploy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport path from 'path';\nimport {Command, Flags} from '@oclif/core';\nimport chalk from 'chalk';\nimport cli from 'cli-ux';\nimport inquirer from 'inquirer';\nimport {BASE_PROJECT_URL, DEFAULT_DEPLOYMENT_TYPE, ROOT_API_URL_PROD} from '../../constants';\nimport {\n  deployToHostedService,\n  dictionaryEndpoints,\n  imageVersions,\n  ipfsCID_validate,\n  networkEndpoints,\n  processEndpoints,\n  projectsInfo,\n  redeploy,\n} from '../../controller/deploy-controller';\nimport {addV, checkToken, promptWithDefaultValues, valueOrPrompt} from '../../utils';\n\nconst ACCESS_TOKEN_PATH = path.resolve(process.env.HOME, '.subql/SUBQL_ACCESS_TOKEN');\nexport default class Deploy extends Command {\n  static description = 'Deployment to hosted service';\n\n  static flags = {\n    org: Flags.string({description: 'Enter organization name'}),\n    projectName: Flags.string({description: 'Enter project name'}),\n    ipfsCID: Flags.string({description: 'Enter IPFS CID'}),\n\n    type: Flags.enum({options: ['stage', 'primary'], default: DEFAULT_DEPLOYMENT_TYPE, required: false}),\n    indexerVersion: Flags.string({description: 'Enter indexer-version', required: false}),\n    queryVersion: Flags.string({description: 'Enter query-version', required: false}),\n    dict: Flags.string({description: 'Enter dictionary', required: false}),\n    endpoint: Flags.string({description: 'Enter endpoint', required: false}),\n    //indexer set up flags\n    indexerUnsafe: Flags.boolean({description: 'Enable indexer unsafe', required: false}),\n    indexerBatchSize: Flags.integer({description: 'Enter batchSize from 1 to 30', required: false}),\n    indexerSubscription: Flags.boolean({description: 'Enable Indexer subscription', required: false}),\n    disableHistorical: Flags.boolean({description: 'Disable Historical Data', required: false}),\n    indexerWorkers: Flags.integer({description: 'Enter worker threads from 1 to 30', required: false}),\n    //query flags\n    queryUnsafe: Flags.boolean({description: 'Enable indexer unsafe', required: false}),\n    querySubscription: Flags.boolean({description: 'Enable Query subscription', required: false}),\n    queryTimeout: Flags.integer({description: 'Enter timeout from 1000ms to 60000ms', required: false}),\n    queryMaxConnection: Flags.integer({description: 'Enter MaxConnection from 1 to 10', required: false}),\n    queryAggregate: Flags.boolean({description: 'Enable Aggregate', required: false}),\n\n    useDefaults: Flags.boolean({\n      char: 'd',\n      description: 'Use default values for indexerVersion, queryVersion, dictionary, endpoint',\n      required: false,\n    }),\n  };\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Deploy);\n    let {dict, endpoint, indexerVersion, ipfsCID, org, projectName, queryVersion} = flags;\n\n    const authToken = await checkToken(process.env.SUBQL_ACCESS_TOKEN, ACCESS_TOKEN_PATH);\n\n    org = await valueOrPrompt(org, 'Enter organisation', 'Organisation is required');\n    projectName = await valueOrPrompt(projectName, 'Enter project name', 'Project name is required');\n    ipfsCID = await valueOrPrompt(ipfsCID, 'Enter IPFS CID', 'IPFS CID is required');\n\n    const validator = await ipfsCID_validate(ipfsCID, authToken, ROOT_API_URL_PROD);\n    queryVersion = addV(queryVersion);\n    indexerVersion = addV(indexerVersion);\n\n    if (!validator.valid) {\n      throw new Error(chalk.bgRedBright('Invalid IPFS CID'));\n    }\n\n    if (!endpoint) {\n      const validateEndpoint = processEndpoints(await networkEndpoints(ROOT_API_URL_PROD), validator.chainId);\n      if (!flags.useDefaults) {\n        endpoint = await promptWithDefaultValues(cli, 'Enter endpoint', validateEndpoint, null, true);\n      } else if (validateEndpoint) {\n        endpoint = validateEndpoint;\n      } else {\n        throw new Error(chalk.red('Please use --endpoint flag when using a custom Endpoint'));\n      }\n    }\n\n    const queryAD = {\n      unsafe: flags.queryUnsafe,\n      subscription: flags.querySubscription,\n      queryTimeout: flags.queryTimeout,\n      maxConnection: flags.queryMaxConnection,\n      Aggregate: flags.queryAggregate,\n    };\n    const indexerAD = {\n      unsafe: flags.indexerUnsafe,\n      batchSize: flags.indexerBatchSize,\n      subscription: flags.indexerSubscription,\n      historicalData: !flags.disableHistorical,\n      workers: flags.indexerWorkers,\n    };\n\n    if (!dict) {\n      const validateDictEndpoint = processEndpoints(await dictionaryEndpoints(ROOT_API_URL_PROD), validator.chainId);\n      if (!flags.useDefaults && !validateDictEndpoint) {\n        dict = await promptWithDefaultValues(cli, 'Enter dictionary', validateDictEndpoint, null, false);\n      } else {\n        dict = validateDictEndpoint;\n      }\n    }\n\n    if (!indexerVersion) {\n      try {\n        const indexerVersions = await imageVersions(\n          validator.manifestRunner.node.name,\n          validator.manifestRunner.node.version,\n          authToken,\n          ROOT_API_URL_PROD\n        );\n        if (!flags.useDefaults) {\n          const response = await promptWithDefaultValues(\n            inquirer,\n            'Enter indexer version',\n            null,\n            indexerVersions,\n            true\n          );\n          indexerVersion = response;\n        } else {\n          indexerVersion = indexerVersions[0];\n        }\n      } catch (e) {\n        throw new Error(chalk.bgRedBright('Indexer version is required'));\n      }\n    }\n    if (!queryVersion) {\n      try {\n        const queryVersions = await imageVersions(\n          validator.manifestRunner.query.name,\n          validator.manifestRunner.query.version,\n          authToken,\n          ROOT_API_URL_PROD\n        );\n        if (!flags.useDefaults) {\n          const response = await promptWithDefaultValues(inquirer, 'Enter query version', null, queryVersions, true);\n          queryVersion = response;\n        } else {\n          queryVersion = queryVersions[0];\n        }\n      } catch (e) {\n        throw new Error(chalk.bgRedBright('Indexer version is required'));\n      }\n    }\n\n    const projectInfo = await projectsInfo(authToken, org, projectName, ROOT_API_URL_PROD, flags.type);\n\n    if (projectInfo !== undefined) {\n      await redeploy(\n        org,\n        projectName,\n        projectInfo.id,\n        authToken,\n        ipfsCID,\n        endpoint,\n        dict,\n        indexerVersion,\n        queryVersion,\n        queryAD,\n        indexerAD,\n        ROOT_API_URL_PROD\n      );\n      this.log(`Project: ${projectName} has been re-deployed`);\n    } else {\n      this.log('Deploying SubQuery project to Hosted Service');\n      const deploymentOutput = await deployToHostedService(\n        org,\n        projectName,\n        authToken,\n        ipfsCID,\n        indexerVersion,\n        queryVersion,\n        endpoint,\n        flags.type,\n        dict,\n        queryAD,\n        indexerAD,\n        ROOT_API_URL_PROD\n      ).catch((e) => this.error(e));\n      this.log(`Project: ${deploymentOutput.projectKey}\n      \\nStatus: ${chalk.blue(deploymentOutput.status)}\n      \\nDeploymentID: ${deploymentOutput.id}\n      \\nDeployment Type: ${deploymentOutput.type}\n      \\nIndexer version: ${deploymentOutput.indexerImage}\n      \\nQuery version: ${deploymentOutput.queryImage}\n      \\nEndpoint: ${deploymentOutput.endpoint}\n      \\nDictionary Endpoint: ${deploymentOutput.dictEndpoint}\n      \\nQuery URL: ${deploymentOutput.queryUrl}\n      \\nProject URL: ${BASE_PROJECT_URL}/project/${deploymentOutput.projectKey}\n      \\nAdvanced Settings for Query: ${JSON.stringify(deploymentOutput.configuration.config.query)}\n      \\nAdvanced Settings for Indexer: ${JSON.stringify(deploymentOutput.configuration.config.indexer)}\n      `);\n    }\n  }\n}\n"]}