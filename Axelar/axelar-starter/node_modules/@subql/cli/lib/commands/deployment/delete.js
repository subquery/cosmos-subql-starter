"use strict";
// Copyright 2020-2022 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const core_1 = require("@oclif/core");
const constants_1 = require("../../constants");
const deploy_controller_1 = require("../../controller/deploy-controller");
const utils_1 = require("../../utils");
const ACCESS_TOKEN_PATH = path_1.default.resolve(process.env.HOME, '.subql/SUBQL_ACCESS_TOKEN');
class Delete extends core_1.Command {
    async run() {
        const { flags } = await this.parse(Delete);
        const authToken = await (0, utils_1.checkToken)(process.env.SUBQL_ACCESS_TOKEN, ACCESS_TOKEN_PATH);
        let deploymentID = +flags.deploymentID;
        let project_name = flags.project_name;
        let org = flags.org;
        org = await (0, utils_1.valueOrPrompt)(org, 'Enter organisation', 'Organisation is required');
        project_name = await (0, utils_1.valueOrPrompt)(project_name, 'Enter project name', 'Project name is required');
        deploymentID = await (0, utils_1.valueOrPrompt)(deploymentID, 'Enter deployment ID', 'Deployment ID is required');
        this.log(`Removing deployment: ${deploymentID}`);
        const delete_output = await (0, deploy_controller_1.deleteDeployment)(org, project_name, authToken, +deploymentID, constants_1.ROOT_API_URL_PROD).catch((e) => this.error(e));
        this.log(`Removed deployment: ${delete_output}`);
    }
}
exports.default = Delete;
Delete.description = 'Delete Deployment';
Delete.flags = {
    org: core_1.Flags.string({ description: 'Enter organization name' }),
    project_name: core_1.Flags.string({ description: 'Enter project name' }),
    deploymentID: core_1.Flags.string({ description: 'Enter deployment ID' }),
};
//# sourceMappingURL=delete.js.map