{"version":3,"file":"promote.js","sourceRoot":"","sources":["../../../src/commands/deployment/promote.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,wDAAwB;AACxB,sCAA2C;AAC3C,+CAAkD;AAClD,0EAAqE;AACrE,uCAAsD;AAEtD,MAAM,iBAAiB,GAAG,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,2BAA2B,CAAC,CAAC;AAEtF,MAAqB,OAAQ,SAAQ,cAAO;IAS1C,KAAK,CAAC,GAAG;QACP,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC1C,MAAM,SAAS,GAAG,MAAM,IAAA,kBAAU,EAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;QAEtF,IAAI,YAAY,GAAW,CAAC,KAAK,CAAC,YAAY,CAAC;QAC/C,IAAI,GAAG,GAAW,KAAK,CAAC,GAAG,CAAC;QAC5B,IAAI,YAAY,GAAW,KAAK,CAAC,YAAY,CAAC;QAE9C,GAAG,GAAG,MAAM,IAAA,qBAAa,EAAC,GAAG,EAAE,oBAAoB,EAAE,0BAA0B,CAAC,CAAC;QACjF,YAAY,GAAG,MAAM,IAAA,qBAAa,EAAC,YAAY,EAAE,oBAAoB,EAAE,0BAA0B,CAAC,CAAC;QACnG,YAAY,GAAG,MAAM,IAAA,qBAAa,EAAC,YAAY,EAAE,qBAAqB,EAAE,2BAA2B,CAAC,CAAC;QAErG,MAAM,cAAc,GAAG,MAAM,IAAA,qCAAiB,EAC5C,GAAG,EACH,YAAY,EACZ,SAAS,EACT,CAAC,YAAY,EACb,6BAAiB,CAClB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAI,CAAC,GAAG,CAAC,uBAAuB,cAAc,2BAA2B,CAAC,CAAC;IAC7E,CAAC;;AA7BH,0BA8BC;AA7BQ,mBAAW,GAAG,oBAAoB,CAAC;AAEnC,aAAK,GAAG;IACb,GAAG,EAAE,YAAK,CAAC,MAAM,CAAC,EAAC,WAAW,EAAE,yBAAyB,EAAC,CAAC;IAC3D,YAAY,EAAE,YAAK,CAAC,MAAM,CAAC,EAAC,WAAW,EAAE,oBAAoB,EAAC,CAAC;IAC/D,YAAY,EAAE,YAAK,CAAC,MAAM,CAAC,EAAC,WAAW,EAAE,qBAAqB,EAAC,CAAC;CACjE,CAAC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport path from 'path';\nimport {Command, Flags} from '@oclif/core';\nimport {ROOT_API_URL_PROD} from '../../constants';\nimport {promoteDeployment} from '../../controller/deploy-controller';\nimport {checkToken, valueOrPrompt} from '../../utils';\n\nconst ACCESS_TOKEN_PATH = path.resolve(process.env.HOME, '.subql/SUBQL_ACCESS_TOKEN');\n\nexport default class Promote extends Command {\n  static description = 'Promote Deployment';\n\n  static flags = {\n    org: Flags.string({description: 'Enter organization name'}),\n    project_name: Flags.string({description: 'Enter project name'}),\n    deploymentID: Flags.string({description: 'Enter deployment ID'}),\n  };\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Promote);\n    const authToken = await checkToken(process.env.SUBQL_ACCESS_TOKEN, ACCESS_TOKEN_PATH);\n\n    let deploymentID: number = +flags.deploymentID;\n    let org: string = flags.org;\n    let project_name: string = flags.project_name;\n\n    org = await valueOrPrompt(org, 'Enter organisation', 'Organisation is required');\n    project_name = await valueOrPrompt(project_name, 'Enter project name', 'Project name is required');\n    deploymentID = await valueOrPrompt(deploymentID, 'Enter deployment ID', 'Deployment ID is required');\n\n    const promote_output = await promoteDeployment(\n      org,\n      project_name,\n      authToken,\n      +deploymentID,\n      ROOT_API_URL_PROD\n    ).catch((e) => this.error(e));\n    this.log(`Promote deployment: ${promote_output} from Stage to Production`);\n  }\n}\n"]}