{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/commands/deployment/index.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,sCAA2C;AAC3C,2DAAqC;AACrC,8DAA8B;AAC9B,8DAA8B;AAC9B,gEAAgC;AAIhC,MAAqB,UAAW,SAAQ,cAAO;IAgB7C,KAAK,CAAC,GAAG;QACP,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAC7C,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC;QAC7B,IAAI,WAA6B,CAAC;QAElC,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,MAAM,CAAC;gBACrC;oBACE,IAAI,EAAE,mBAAmB;oBACzB,OAAO,EAAE,6BAA6B;oBACtC,IAAI,EAAE,MAAM;oBACZ,OAAO,EAAE,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAC,EAAE,EAAC,IAAI,EAAE,SAAS,EAAC,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC;iBACjE;aACF,CAAC,CAAC;YAEH,WAAW,GAAG,QAAQ,CAAC,iBAAiB,CAAC;SAC1C;aAAM;YACL,WAAW,GAAG,MAA0B,CAAC;SAC1C;QACD,IAAI,CAAC,GAAG,CAAC,+BAA+B,WAAW,EAAE,CAAC,CAAC;QACvD,IAAI;YACF,MAAM,OAAO,GAAG,UAAU,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;YACtD,iFAAiF;YACjF,MAAM,aAAa,GAAa,OAAO,CAAC,IAAI;iBACzC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;iBACxF,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAExD,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;SAClC;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,GAAG,CAAC,8BAA8B,WAAW,WAAW,CAAC,EAAE,CAAC,CAAC;SACnE;IACH,CAAC;;AA/CH,6BAgDC;AA/CQ,sBAAW,GAAG,0BAA0B,CAAC;AACzC,gBAAK,+CACV,OAAO,EAAE,YAAK,CAAC,MAAM,CAAC;QACpB,OAAO,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC;KACzC,CAAC,IACC,gBAAM,CAAC,KAAK,GACZ,iBAAO,CAAC,KAAK,GACb,gBAAM,CAAC,KAAK,EACf;AACK,wBAAa,GAAG;IACrB,MAAM,EAAE,gBAAM;IACd,OAAO,EAAE,iBAAO;IAChB,MAAM,EAAE,gBAAM;CACf,CAAC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Command, Flags} from '@oclif/core';\nimport * as inquirer from 'inquirer';\nimport Delete from './delete';\nimport Deploy from './deploy';\nimport Promote from './promote';\n\ntype DeploymentOption = 'promote' | 'delete' | 'deploy';\n\nexport default class Deployment extends Command {\n  static description = 'Deploy to hosted service';\n  static flags = {\n    options: Flags.string({\n      options: ['deploy', 'promote', 'delete'],\n    }),\n    ...Deploy.flags,\n    ...Promote.flags,\n    ...Delete.flags,\n  };\n  static optionMapping = {\n    deploy: Deploy,\n    promote: Promote,\n    delete: Delete,\n  };\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Deployment);\n    const option = flags.options;\n    let userOptions: DeploymentOption;\n\n    if (!option) {\n      const response = await inquirer.prompt([\n        {\n          name: 'deploymentOptions',\n          message: 'Select an deployment option',\n          type: 'list',\n          choices: [{name: 'deploy'}, {name: 'promote'}, {name: 'delete'}],\n        },\n      ]);\n\n      userOptions = response.deploymentOptions;\n    } else {\n      userOptions = option as DeploymentOption;\n    }\n    this.log(`Selected deployment option: ${userOptions}`);\n    try {\n      const handler = Deployment.optionMapping[userOptions];\n      // removes arguments -> deployment and everything before it from the process.argv\n      const stripped_argv: string[] = process.argv\n        .filter((v, idx) => idx > process.argv.indexOf('deployment') && !v.includes('--options'))\n        .reduce((acc, val) => acc.concat(val.split('=')), []);\n\n      await handler.run(stripped_argv);\n    } catch (e) {\n      this.log(`Failed to execute command: ${userOptions} error: ${e}`);\n    }\n  }\n}\n"]}