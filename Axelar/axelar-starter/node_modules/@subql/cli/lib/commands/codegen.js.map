{"version":3,"file":"codegen.js","sourceRoot":"","sources":["../../src/commands/codegen.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,wDAAwB;AACxB,sCAA2C;AAC3C,yEAAyD;AAEzD,MAAqB,OAAQ,SAAQ,cAAO;IAQ1C,KAAK,CAAC,GAAG;QACP,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC1C,IAAI,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC5C,IAAI,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC5C,IAAI,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAE5C,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAC,GAAG,KAAK,CAAC;QAE/B,MAAM,gBAAgB,GAAG,IAAI,CAAC,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC/D,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,cAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAElH,MAAM,gBAAgB,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAExF,IAAI;YACF,IAAI,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBAC7B,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;aAC/E;YACD,MAAM,IAAA,4BAAO,EAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;SAC3C;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC3B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACjB;IACH,CAAC;;AA9BH,0BA+BC;AA9BQ,mBAAW,GAAG,iCAAiC,CAAC;AAEhD,aAAK,GAAG;IACb,QAAQ,EAAE,YAAK,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,gCAAgC,EAAC,CAAC;IAClF,IAAI,EAAE,YAAK,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,6DAA6D,EAAC,CAAC;CAC5G,CAAC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport path from 'path';\nimport {Command, Flags} from '@oclif/core';\nimport {codegen} from '../controller/codegen-controller';\n\nexport default class Codegen extends Command {\n  static description = 'Generate schemas for graph node';\n\n  static flags = {\n    location: Flags.string({char: 'l', description: 'local folder to run codegen in'}),\n    file: Flags.string({char: 'f', description: 'specify manifest file path (will overwrite -l if both used)'}),\n  };\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Codegen);\n    this.log('===============================');\n    this.log('---------Subql Codegen---------');\n    this.log('===============================');\n\n    const {file, location} = flags;\n\n    const resolvedFilePath = file ? path.resolve(file) : undefined;\n    const [fileDir, fileName] = resolvedFilePath ? [path.dirname(file), path.basename(file)] : [undefined, undefined];\n\n    const resolvedLocation = fileDir ?? (location ? path.resolve(location) : process.cwd());\n\n    try {\n      if (file && !resolvedFilePath) {\n        throw new Error('Cannot resolve project manifest from --file argument given');\n      }\n      await codegen(resolvedLocation, fileName);\n    } catch (err) {\n      console.error(err.message);\n      process.exit(1);\n    }\n  }\n}\n"]}