{"version":3,"file":"build.js","sourceRoot":"","sources":["../../src/commands/build.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {lstatSync, readFileSync} from 'fs';\nimport path from 'path';\nimport {Command, Flags} from '@oclif/core';\nimport {runWebpack} from '../controller/build-controller';\n\nexport default class Build extends Command {\n  static description = 'Build this SubQuery project code';\n\n  static flags = {\n    location: Flags.string({char: 'f', description: 'local folder'}),\n    output: Flags.string({char: 'o', description: 'output folder of build e.g. dist'}),\n    mode: Flags.enum({options: ['production', 'prod', 'development', 'dev'], default: 'production'}),\n    slient: Flags.boolean({char: 's', description: 'silent mode'}),\n  };\n\n  async run(): Promise<void> {\n    try {\n      const {flags} = await this.parse(Build);\n\n      const directory = flags.location ? path.resolve(flags.location) : process.cwd();\n      const isDev = flags.mode === 'development' || flags.mode === 'dev';\n\n      if (!lstatSync(directory).isDirectory()) {\n        this.error('Argument `location` is not a valid directory');\n      }\n\n      // Get the output location from the project package.json main field\n      const pjson = JSON.parse(readFileSync(path.join(directory, 'package.json')).toString());\n\n      const defaultEntry = path.join(directory, 'src/index.ts');\n      const outputDir = path.resolve(directory, flags.output ?? 'dist');\n\n      let buildEntries: {[key: string]: string} = {};\n      buildEntries.index = defaultEntry;\n\n      if (pjson.exports && typeof pjson.exports !== 'string') {\n        buildEntries = Object.entries(pjson.exports as Record<string, string>).reduce(\n          (acc, [key, value]) => {\n            acc[key] = path.resolve(directory, value);\n            return acc;\n          },\n          {...buildEntries}\n        );\n      }\n\n      for (const i in buildEntries) {\n        if (typeof buildEntries[i] !== 'string') {\n          this.warn(`Ignoring entry ${i} from build.`);\n          delete buildEntries[i];\n        }\n      }\n      await runWebpack(buildEntries, directory, outputDir, isDev, true);\n      if (!flags.slient) {\n        this.log('Building and packing code ...');\n        this.log('Done!');\n      }\n    } catch (e) {\n      this.error(e);\n    }\n  }\n}\n"]}