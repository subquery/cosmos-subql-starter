{"version":3,"file":"validate.js","sourceRoot":"","sources":["../../src/commands/validate.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {Command, Flags} from '@oclif/core';\nimport {IPFS_NODE_ENDPOINT, IPFS_REGEX, NETWORK_FAMILY} from '@subql/common';\nimport {commonRules, deploymentRules, Validator} from '@subql/validator';\nimport chalk from 'chalk';\n\nexport default class Validate extends Command {\n  static description = 'Check a folder or github repo is a validate subquery project';\n\n  static flags = {\n    location: Flags.string({char: 'l', description: 'local folder, github repo url or IPFS cid'}),\n    ipfs: Flags.string({\n      description: 'IPFS gateway endpoint, used for validating projects on IPFS',\n      default: IPFS_NODE_ENDPOINT,\n    }),\n    silent: Flags.boolean(),\n    'network-family': Flags.enum({options: Object.values(NETWORK_FAMILY)}),\n  };\n\n  //TODO, currently validation only work for complete project, ipfs deployment is not supported\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Validate);\n    const location = flags.location ?? process.cwd();\n    const v = await Validator.create(location, {ipfs: flags.ipfs}, flags['network-family']);\n\n    const ipfsMatch = location.match(IPFS_REGEX);\n    if (ipfsMatch) {\n      v.addRule(...deploymentRules);\n    } else {\n      v.addRule(...commonRules);\n    }\n\n    const reports = await v.getValidateReports();\n    const passed = reports.filter((r) => r.valid).length;\n    const skipped = reports.filter((r) => r.skipped).length;\n    const failed = reports.length - passed - skipped;\n\n    if (!flags.silent) {\n      for (const r of reports) {\n        if (r.valid) {\n          this.log(`${chalk.bgGreen.bold(' PASS ')} ${r.name}`);\n        } else if (r.skipped) {\n          this.log(`${chalk.yellow.bold(' SKIP ')} ${r.name}`);\n        } else {\n          this.log(`${chalk.bgRed.bold(' FAIL ')} ${r.name}`);\n          this.log(`       ${chalk.redBright(r.description)}`);\n        }\n      }\n\n      this.log('');\n      this.log(`Result: ${passed} passed, ${failed} failed, ${skipped} skipped`);\n      this.log('');\n    }\n\n    if (failed > 0) {\n      this.exit(1);\n    }\n  }\n}\n"]}