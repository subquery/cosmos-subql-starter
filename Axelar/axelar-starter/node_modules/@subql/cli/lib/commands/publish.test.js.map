{"version":3,"file":"publish.test.js","sourceRoot":"","sources":["../../src/commands/publish.test.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,oDAAoB;AACpB,wDAAwB;AACxB,+BAA+B;AAC/B,4DAA4B;AAC5B,mFAA2F;AAC3F,gEAAgC;AAEhC,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,IAAI,UAAkB,CAAC;IACvB,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,IAAI;YACF,MAAM,IAAA,gBAAS,EAAC,gBAAM,CAAC,CAAC,UAAU,CAAC,CAAC;SACrC;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;SACvD;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,OAAO,GAAG,sDAAsD,CAAC;QACvE,UAAU,GAAG,MAAM,IAAA,2CAAiB,EAAC,2CAAiB,CAAC,CAAC;QACxD,MAAM,WAAW,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QAC7D,MAAM,YAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAClD,MAAM,iBAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;QAC5C,MAAM,QAAQ,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QACjE,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6EAA6E,EAAE,KAAK,IAAI,EAAE;QAC3F,UAAU,GAAG,MAAM,IAAA,2CAAiB,EAAC,2CAAiB,CAAC,CAAC;QACxD,MAAM,YAAY,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QAC9D,MAAM,gBAAgB,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QAC/D,YAAE,CAAC,UAAU,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;QAC9C,MAAM,iBAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC,CAAC;QAE5C,MAAM,OAAO,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QACtD,MAAM,UAAU,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnD,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,UAAU,GAAG,MAAM,IAAA,2CAAiB,EAAC,2CAAiB,CAAC,CAAC;QACxD,MAAM,iBAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;QACtC,MAAM,OAAO,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QACzD,MAAM,UAAU,GAAG,YAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC1C,MAAM,WAAW,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAChE,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;QAClC,MAAM,CAAC,UAAU,CAAC,CAAC,UAAU,EAAE,CAAC;IAClC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {promisify} from 'util';\nimport rimraf from 'rimraf';\nimport {createTestProject, projectSpecV1_0_0} from '../controller/publish-controller.spec';\nimport Publish from './publish';\n\ndescribe('Intergration test - Publish', () => {\n  let projectDir: string;\n  afterEach(async () => {\n    try {\n      await promisify(rimraf)(projectDir);\n    } catch (e) {\n      console.warn('Failed to clean up tmp dir after test');\n    }\n  });\n\n  it('overwrites any exisiting CID files', async () => {\n    const initCID = 'QmWLxg7xV7ZWUyc7ZxZ8XuQQ7NmH8WQGXzg7VZ3QQNqF-testing';\n    projectDir = await createTestProject(projectSpecV1_0_0);\n    const cidFilePath = path.resolve(projectDir, '.project-cid');\n    await fs.promises.writeFile(cidFilePath, initCID);\n    await Publish.run(['-f', projectDir, '-o']);\n    const cidValue = await fs.promises.readFile(cidFilePath, 'utf8');\n    expect(initCID).not.toEqual(cidValue);\n  });\n\n  it('file name consistent with manfiest file name, if -f <manifest path> is used', async () => {\n    projectDir = await createTestProject(projectSpecV1_0_0);\n    const manifestPath = path.resolve(projectDir, 'project.yaml');\n    const testManifestPath = path.resolve(projectDir, 'test.yaml');\n    fs.renameSync(manifestPath, testManifestPath);\n    await Publish.run(['-f', testManifestPath]);\n\n    const cidFile = path.resolve(projectDir, '.test-cid');\n    const fileExists = await fs.promises.stat(cidFile);\n    expect(fileExists.isFile()).toBeTruthy();\n  });\n\n  it('create ipfsCID file stored in local with dictiory path', async () => {\n    projectDir = await createTestProject(projectSpecV1_0_0);\n    await Publish.run(['-f', projectDir]);\n    const cidFile = path.resolve(projectDir, '.project-cid');\n    const fileExists = fs.existsSync(cidFile);\n    const IPFScontent = await fs.promises.readFile(cidFile, 'utf8');\n    expect(IPFScontent).toBeDefined();\n    expect(fileExists).toBeTruthy();\n  });\n});\n"]}