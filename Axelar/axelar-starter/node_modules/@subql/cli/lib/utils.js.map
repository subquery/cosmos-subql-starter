{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;AAEtC,2BAA4C;AAC5C,0DAA0B;AAC1B,4DAA+B;AAC/B,gEAA4C;AAErC,KAAK,UAAU,KAAK,CAAC,GAAW;IACrC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC7B,UAAU,CAAC,OAAO,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,sBAIC;AAEM,KAAK,UAAU,aAAa,CAAI,KAAQ,EAAE,GAAW,EAAE,KAAa;IACzE,IAAI,KAAK;QAAE,OAAO,KAAK,CAAC;IACxB,IAAI;QACF,OAAO,MAAM,gBAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAC9B;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;KACxB;AACH,CAAC;AAPD,sCAOC;AAED,SAAgB,IAAI,CAAC,GAAuB;IAC1C,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC7B,OAAO,IAAI,GAAG,EAAE,CAAC;KAClB;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AALD,oBAKC;AAEM,KAAK,UAAU,uBAAuB,CAC3C,UAAgC,EAChC,GAAW,EACX,YAAqB,EACrB,OAAkB,EAClB,QAAkB;IAElB,MAAM,WAAW,GACf,UAAU,KAAK,kBAAQ;QACrB,CAAC,CAAC,CACE,MAAM,UAAU,CAAC,MAAM,CAAC;YACtB,IAAI,EAAE,gBAAgB;YACtB,OAAO,EAAE,GAAG;YACZ,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,OAAO;SACjB,CAAC,CACH,CAAC,cAAc;QAClB,CAAC,CAAC,MAAM,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,EAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC;IAChF,OAAO,WAAW,CAAC;AACrB,CAAC;AAnBD,0DAmBC;AAEM,KAAK,UAAU,UAAU,CAAC,aAAqB,EAAE,UAAkB;;IACxE,IAAI,SAAS,GAAG,aAAa,CAAC;IAC9B,IAAI,aAAa;QAAE,OAAO,aAAa,CAAC;IACxC,IAAI,IAAA,eAAU,EAAC,UAAU,CAAC,EAAE;QAC1B,IAAI;YACF,SAAS,GAAG,MAAA,OAAO,CAAC,GAAG,CAAC,kBAAkB,mCAAI,IAAA,iBAAY,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;SAChF;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,SAAS,GAAG,MAAM,gBAAG,CAAC,MAAM,CAAC,oCAAoC,CAAC,CAAC,CAAC;SAC7E;KACF;SAAM;QACL,SAAS,GAAG,MAAM,gBAAG,CAAC,MAAM,CAAC,oCAAoC,CAAC,CAAC;QACnE,OAAO,SAAS,CAAC;KAClB;AACH,CAAC;AAbD,gCAaC;AAED,SAAgB,WAAW,CAAC,CAAM,EAAE,GAAW;IAC7C,IAAI,eAAK,CAAC,YAAY,CAAC,CAAC,CAAQ,EAAE;QAChC,MAAM,IAAI,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;KACtD;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;KACxC;AACH,CAAC;AAND,kCAMC;AAED,SAAgB,eAAe,CAAC,GAAW,EAAE,WAAmB;IAC9D,OAAO,kBAAkB,CAAC,GAAG,GAAG,IAAI,WAAW,EAAE,CAAC,CAAC;AACrD,CAAC;AAFD,0CAEC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {existsSync, readFileSync} from 'fs';\nimport axios from 'axios';\nimport cli, {ux} from 'cli-ux';\nimport inquirer, {Inquirer} from 'inquirer';\n\nexport async function delay(sec: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, sec * 1000);\n  });\n}\n\nexport async function valueOrPrompt<T>(value: T, msg: string, error: string): Promise<T> {\n  if (value) return value;\n  try {\n    return await cli.prompt(msg);\n  } catch (e) {\n    throw new Error(error);\n  }\n}\n\nexport function addV(str: string | undefined) {\n  if (str && !str.includes('v')) {\n    return `v${str}`;\n  }\n  return str;\n}\n\nexport async function promptWithDefaultValues(\n  promptType: Inquirer | typeof ux,\n  msg: string,\n  defaultValue?: string,\n  choices?: string[],\n  required?: boolean\n): Promise<string> {\n  const promptValue =\n    promptType === inquirer\n      ? (\n          await promptType.prompt({\n            name: 'runnerVersions',\n            message: msg,\n            type: 'list',\n            choices: choices,\n          })\n        ).runnerVersions\n      : await promptType.prompt(msg, {default: defaultValue, required: required});\n  return promptValue;\n}\n\nexport async function checkToken(authToken_ENV: string, token_path: string): Promise<string> {\n  let authToken = authToken_ENV;\n  if (authToken_ENV) return authToken_ENV;\n  if (existsSync(token_path)) {\n    try {\n      authToken = process.env.SUBQL_ACCESS_TOKEN ?? readFileSync(token_path, 'utf8');\n    } catch (e) {\n      return (authToken = await cli.prompt('Token cannot be found, Enter token'));\n    }\n  } else {\n    authToken = await cli.prompt('Token cannot be found, Enter token');\n    return authToken;\n  }\n}\n\nexport function errorHandle(e: any, msg: string): string {\n  if (axios.isAxiosError(e) as any) {\n    throw new Error(`${msg} ${e.response.data.message}`);\n  } else {\n    throw new Error(`${msg} ${e.message}`);\n  }\n}\n\nexport function buildProjectKey(org: string, projectName: string): string {\n  return encodeURIComponent(`${org}/${projectName}`);\n}\n"]}