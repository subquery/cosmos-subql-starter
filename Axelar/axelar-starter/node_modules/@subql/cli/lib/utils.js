"use strict";
// Copyright 2020-2022 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildProjectKey = exports.errorHandle = exports.checkToken = exports.promptWithDefaultValues = exports.addV = exports.valueOrPrompt = exports.delay = void 0;
const tslib_1 = require("tslib");
const fs_1 = require("fs");
const axios_1 = tslib_1.__importDefault(require("axios"));
const cli_ux_1 = tslib_1.__importDefault(require("cli-ux"));
const inquirer_1 = tslib_1.__importDefault(require("inquirer"));
async function delay(sec) {
    return new Promise((resolve) => {
        setTimeout(resolve, sec * 1000);
    });
}
exports.delay = delay;
async function valueOrPrompt(value, msg, error) {
    if (value)
        return value;
    try {
        return await cli_ux_1.default.prompt(msg);
    }
    catch (e) {
        throw new Error(error);
    }
}
exports.valueOrPrompt = valueOrPrompt;
function addV(str) {
    if (str && !str.includes('v')) {
        return `v${str}`;
    }
    return str;
}
exports.addV = addV;
async function promptWithDefaultValues(promptType, msg, defaultValue, choices, required) {
    const promptValue = promptType === inquirer_1.default
        ? (await promptType.prompt({
            name: 'runnerVersions',
            message: msg,
            type: 'list',
            choices: choices,
        })).runnerVersions
        : await promptType.prompt(msg, { default: defaultValue, required: required });
    return promptValue;
}
exports.promptWithDefaultValues = promptWithDefaultValues;
async function checkToken(authToken_ENV, token_path) {
    var _a;
    let authToken = authToken_ENV;
    if (authToken_ENV)
        return authToken_ENV;
    if ((0, fs_1.existsSync)(token_path)) {
        try {
            authToken = (_a = process.env.SUBQL_ACCESS_TOKEN) !== null && _a !== void 0 ? _a : (0, fs_1.readFileSync)(token_path, 'utf8');
        }
        catch (e) {
            return (authToken = await cli_ux_1.default.prompt('Token cannot be found, Enter token'));
        }
    }
    else {
        authToken = await cli_ux_1.default.prompt('Token cannot be found, Enter token');
        return authToken;
    }
}
exports.checkToken = checkToken;
function errorHandle(e, msg) {
    if (axios_1.default.isAxiosError(e)) {
        throw new Error(`${msg} ${e.response.data.message}`);
    }
    else {
        throw new Error(`${msg} ${e.message}`);
    }
}
exports.errorHandle = errorHandle;
function buildProjectKey(org, projectName) {
    return encodeURIComponent(`${org}/${projectName}`);
}
exports.buildProjectKey = buildProjectKey;
//# sourceMappingURL=utils.js.map