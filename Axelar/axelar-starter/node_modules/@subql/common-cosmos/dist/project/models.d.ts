import { SubqlCosmosEventFilter, SubqlCosmosHandlerKind, SubqlCosmosCustomHandler, SubqlCosmosMapping, SubqlCosmosHandler, SubqlCosmosRuntimeHandler, SubqlCosmosRuntimeDatasource, SubqlCosmosDatasourceKind, SubqlCosmosCustomDatasource, FileReference, CustomDataSourceAsset, SubqlCosmosBlockFilter, SubqlCosmosBlockHandler, SubqlCosmosEventHandler, SubqlCosmosMessageFilter, SubqlCosmosTransactionHandler, SubqlCosmosMessageHandler, CustomModule, SubqlCosmosTxFilter } from '@subql/types-cosmos';
export declare class CosmosBlockFilter implements SubqlCosmosBlockFilter {
    modulo?: number;
    timestamp?: string;
}
export declare class CosmosTxFilter implements SubqlCosmosTxFilter {
    includeFailedTx?: boolean;
}
export declare class CosmosMessageFilter extends CosmosTxFilter implements SubqlCosmosMessageFilter {
    type: string;
    values?: {
        [key: string]: string;
    };
    contractCall?: string;
}
export declare class CosmosEventFilter implements SubqlCosmosEventFilter {
    type: string;
    messageFilter?: SubqlCosmosMessageFilter;
    attributes?: Record<string, string | number>;
}
export declare class CosmosBlockHandler implements SubqlCosmosBlockHandler {
    kind: SubqlCosmosHandlerKind.Block;
    handler: string;
    filter?: SubqlCosmosBlockFilter;
}
export declare class CosmosTransactionHandler implements SubqlCosmosTransactionHandler {
    kind: SubqlCosmosHandlerKind.Transaction;
    handler: string;
}
export declare class CosmosMessageHandler implements SubqlCosmosMessageHandler {
    kind: SubqlCosmosHandlerKind.Message;
    handler: string;
    filter?: CosmosMessageFilter;
}
export declare class CosmosEventHandler implements SubqlCosmosEventHandler {
    filter?: SubqlCosmosEventFilter;
    kind: SubqlCosmosHandlerKind.Event;
    handler: string;
}
export declare class CosmosCustomHandler implements SubqlCosmosCustomHandler {
    kind: string;
    handler: string;
    filter?: Record<string, unknown>;
}
export declare class CosmosMapping implements SubqlCosmosMapping {
    handlers: SubqlCosmosHandler[];
    file: string;
}
export declare class CosmosCustomMapping implements SubqlCosmosMapping<SubqlCosmosCustomHandler> {
    handlers: CosmosCustomHandler[];
    file: string;
}
export declare class CosmosRuntimeDataSourceBase<M extends SubqlCosmosMapping<SubqlCosmosRuntimeHandler>> implements SubqlCosmosRuntimeDatasource<M> {
    kind: SubqlCosmosDatasourceKind.Runtime;
    mapping: M;
    startBlock: number;
    chainTypes: Map<string, CustomModule>;
}
export declare class CosmosFileReferenceImpl implements FileReference {
    file: string;
}
export declare class CosmosCustomModuleImpl implements CustomModule {
    file: string;
    messages: string[];
}
export declare class CosmosCustomDataSourceBase<K extends string, M extends SubqlCosmosMapping = SubqlCosmosMapping<SubqlCosmosCustomHandler>, O = any> implements SubqlCosmosCustomDatasource<K, M, O> {
    kind: K;
    mapping: M;
    startBlock?: number;
    assets: Map<string, CustomDataSourceAsset>;
    processor?: FileReference;
    chainTypes: Map<string, CustomModule>;
}
