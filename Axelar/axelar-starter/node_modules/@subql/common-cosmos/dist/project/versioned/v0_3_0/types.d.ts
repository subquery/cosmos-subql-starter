import { SubqlCosmosCustomDatasource, SubqlCosmosCustomHandler, SubqlCosmosDatasource, SubqlCosmosHandler, SubqlCosmosMapping, SubqlCosmosRuntimeDatasource, SubqlCosmosRuntimeHandler, CustomModule } from '@subql/types-cosmos';
import { ICosmosProjectManifest } from '../../types';
export interface SubqlMappingV0_3_0<T extends SubqlCosmosHandler> extends SubqlCosmosMapping<T> {
    file: string;
}
export declare type RuntimeDataSourceV0_3_0 = SubqlCosmosRuntimeDatasource<SubqlMappingV0_3_0<SubqlCosmosRuntimeHandler>>;
export declare type CustomDatasourceV0_3_0 = SubqlCosmosCustomDatasource<string, SubqlMappingV0_3_0<SubqlCosmosCustomHandler>>;
export interface CosmosProjectManifestV0_3_0 extends ICosmosProjectManifest {
    name: string;
    version: string;
    schema: {
        file: string;
    };
    network: {
        endpoint?: string;
        dictionary?: string;
        chainId: string;
        chainTypes?: Map<string, CustomModule>;
    };
    dataSources: (RuntimeDataSourceV0_3_0 | CustomDatasourceV0_3_0)[];
}
export declare function isRuntimeDataSourceV0_3_0(dataSource: SubqlCosmosDatasource): dataSource is RuntimeDataSourceV0_3_0;
