"use strict";
// Copyright 2020-2022 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectNetwork = exports.getSchemaPath = exports.getManifestPath = exports.loadFromJsonOrYaml = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const semver_1 = require("semver");
const constants_1 = require("../constants");
function loadFromJsonOrYaml(file) {
    const { ext } = path_1.default.parse(file);
    if (ext !== '.yaml' && ext !== '.yml' && ext !== '.json') {
        throw new Error(`Extension ${ext} not supported`);
    }
    const rawContent = fs_1.default.readFileSync(file, 'utf-8');
    return js_yaml_1.default.load(rawContent);
}
exports.loadFromJsonOrYaml = loadFromJsonOrYaml;
function getManifestPath(manifestDir, fileName) {
    let manifestPath = manifestDir;
    if (fs_1.default.existsSync(manifestDir) && fs_1.default.lstatSync(manifestDir).isDirectory()) {
        const yamlFilePath = path_1.default.join(manifestDir, fileName !== null && fileName !== void 0 ? fileName : 'project.yaml');
        const jsonFilePath = path_1.default.join(manifestDir, fileName !== null && fileName !== void 0 ? fileName : 'project.json');
        if (fs_1.default.existsSync(yamlFilePath)) {
            manifestPath = yamlFilePath;
        }
        else if (fs_1.default.existsSync(jsonFilePath)) {
            manifestPath = jsonFilePath;
        }
        else {
            throw new Error(`Could not find project manifest under dir ${manifestDir}`);
        }
    }
    return manifestPath;
}
exports.getManifestPath = getManifestPath;
function getSchemaPath(manifestDir, fileName) {
    const yamlFile = loadFromJsonOrYaml(getManifestPath(manifestDir, fileName));
    if (yamlFile.specVersion === '0.0.1') {
        return path_1.default.join(manifestDir, yamlFile.schema);
    }
    const project = yamlFile;
    if (!project.schema) {
        throw new Error(`Can't get schema in yaml file`);
    }
    if (!project.schema.file) {
        throw new Error(`schemaPath expect to be schema.file`);
    }
    return path_1.default.join(manifestDir, project.schema.file);
}
exports.getSchemaPath = getSchemaPath;
// Only work for manifest specVersion >= 1.0.0
function getProjectNetwork(rawManifest) {
    if ((0, semver_1.gte)(rawManifest.specVersion, '1.0.0')) {
        const network = constants_1.runnerMapping[rawManifest.runner.node.name];
        if (network === undefined) {
            throw new Error(`Can not identify project network with runner node ${rawManifest.runner.node.name}`);
        }
        return network;
    }
    else {
        throw new Error('Can not identify project network under spec version 1.0.0');
    }
}
exports.getProjectNetwork = getProjectNetwork;
//# sourceMappingURL=load.js.map