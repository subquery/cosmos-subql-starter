{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/project/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport {ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface} from 'class-validator';\nimport detectPort from 'detect-port';\nimport {prerelease, satisfies, valid, validRange} from 'semver';\n\nexport async function makeTempDir(): Promise<string> {\n  const sep = path.sep;\n  const tmpDir = os.tmpdir();\n  const tempPath = await fs.promises.mkdtemp(`${tmpDir}${sep}`);\n  return tempPath;\n}\n\nexport async function findAvailablePort(startPort: number, range = 10): Promise<number> {\n  for (let port = startPort; port <= startPort + range; port++) {\n    try {\n      const _port = await detectPort(port);\n      if (_port === port) {\n        return port;\n      }\n    } catch (e) {\n      return null;\n    }\n  }\n\n  return null;\n}\n\nexport interface ProjectRootAndManifest {\n  root: string;\n  manifest: string;\n}\n\n// --subquery -f pass in can be project.yaml or project.path,\n// use this to determine its project root and manifest\nexport function getProjectRootAndManifest(subquery: string): ProjectRootAndManifest {\n  const project = {} as ProjectRootAndManifest;\n  const stats = fs.statSync(subquery);\n  if (stats.isDirectory()) {\n    project.root = subquery;\n    project.manifest = path.resolve(subquery, 'project.yaml');\n  } else if (stats.isFile()) {\n    const {dir} = path.parse(subquery);\n    project.root = dir;\n    project.manifest = subquery;\n  }\n  project.root = path.resolve(project.root);\n  return project;\n}\n\nexport function validateSemver(current: string, required: string): boolean {\n  return satisfies(current, required, {includePrerelease: true});\n}\n\n@ValidatorConstraint({name: 'semver', async: false})\nexport class SemverVersionValidator implements ValidatorConstraintInterface {\n  validate(value: string | null | undefined): boolean {\n    if (valid(value, {includePrerelease: false}) === null) {\n      return validRange(value, {includePrerelease: false}) !== null;\n    } else {\n      return prerelease(value) === null;\n    }\n  }\n  defaultMessage(args: ValidationArguments): string {\n    return `'${args.value}' is not a valid version. Please provide a valid semver`;\n  }\n}\n\nexport async function delay(sec: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, sec * 1000);\n  });\n}\n"]}