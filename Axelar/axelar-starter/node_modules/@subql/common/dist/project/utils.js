"use strict";
// Copyright 2020-2022 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.delay = exports.SemverVersionValidator = exports.validateSemver = exports.getProjectRootAndManifest = exports.findAvailablePort = exports.makeTempDir = void 0;
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const class_validator_1 = require("class-validator");
const detect_port_1 = __importDefault(require("detect-port"));
const semver_1 = require("semver");
async function makeTempDir() {
    const sep = path_1.default.sep;
    const tmpDir = os_1.default.tmpdir();
    const tempPath = await fs_1.default.promises.mkdtemp(`${tmpDir}${sep}`);
    return tempPath;
}
exports.makeTempDir = makeTempDir;
async function findAvailablePort(startPort, range = 10) {
    for (let port = startPort; port <= startPort + range; port++) {
        try {
            const _port = await (0, detect_port_1.default)(port);
            if (_port === port) {
                return port;
            }
        }
        catch (e) {
            return null;
        }
    }
    return null;
}
exports.findAvailablePort = findAvailablePort;
// --subquery -f pass in can be project.yaml or project.path,
// use this to determine its project root and manifest
function getProjectRootAndManifest(subquery) {
    const project = {};
    const stats = fs_1.default.statSync(subquery);
    if (stats.isDirectory()) {
        project.root = subquery;
        project.manifest = path_1.default.resolve(subquery, 'project.yaml');
    }
    else if (stats.isFile()) {
        const { dir } = path_1.default.parse(subquery);
        project.root = dir;
        project.manifest = subquery;
    }
    project.root = path_1.default.resolve(project.root);
    return project;
}
exports.getProjectRootAndManifest = getProjectRootAndManifest;
function validateSemver(current, required) {
    return (0, semver_1.satisfies)(current, required, { includePrerelease: true });
}
exports.validateSemver = validateSemver;
let SemverVersionValidator = class SemverVersionValidator {
    validate(value) {
        if ((0, semver_1.valid)(value, { includePrerelease: false }) === null) {
            return (0, semver_1.validRange)(value, { includePrerelease: false }) !== null;
        }
        else {
            return (0, semver_1.prerelease)(value) === null;
        }
    }
    defaultMessage(args) {
        return `'${args.value}' is not a valid version. Please provide a valid semver`;
    }
};
SemverVersionValidator = __decorate([
    (0, class_validator_1.ValidatorConstraint)({ name: 'semver', async: false })
], SemverVersionValidator);
exports.SemverVersionValidator = SemverVersionValidator;
async function delay(sec) {
    return new Promise((resolve) => {
        setTimeout(resolve, sec * 1000);
    });
}
exports.delay = delay;
//# sourceMappingURL=utils.js.map