{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/project/versioned/base.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;;;;;;;;;;AAEtC,yDAA+C;AAC/C,qDAA8D;AAC9D,sDAA2B;AAE3B,MAAsB,uBAAuB;IAY3C,YAAY;QACV,iDAAiD;QACjD,OAAO,iBAAI,CAAC,IAAI,CAAC,IAAA,gCAAY,EAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YAC9C,QAAQ,EAAE,IAAI;YACd,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,MAAM,MAAM,GAAG,IAAA,8BAAY,EAAC,IAAI,CAAC,UAAU,EAAE,EAAC,SAAS,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAC,CAAC,CAAC;QAC5F,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,EAAE;YAClB,4BAA4B;YAC5B,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7D,MAAM,IAAI,KAAK,CAAC,kCAAkC,SAAS,EAAE,CAAC,CAAC;SAChE;IACH,CAAC;CACF;AA3BC;IAAC,IAAA,uBAAK,GAAE;;4DACY;AACpB;IAAC,IAAA,0BAAQ,GAAE;;4DACS;AACpB;IAAC,IAAA,0BAAQ,GAAE;;2DACQ;AACnB;IAAC,IAAA,0BAAQ,GAAE;;4DACS;AARtB,0DA4BC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {classToPlain} from 'class-transformer';\nimport {Allow, IsString, validateSync} from 'class-validator';\nimport yaml from 'js-yaml';\n\nexport abstract class ProjectManifestBaseImpl<D extends object> {\n  @Allow()\n  definitions: object;\n  @IsString()\n  description: string;\n  @IsString()\n  repository: string;\n  @IsString()\n  specVersion: string;\n\n  abstract readonly deployment: D;\n\n  toDeployment(): string {\n    // classToPlain fixes Map type with assets fields\n    return yaml.dump(classToPlain(this.deployment), {\n      sortKeys: true,\n      condenseFlow: true,\n    });\n  }\n\n  validate(): void {\n    const errors = validateSync(this.deployment, {whitelist: true, forbidNonWhitelisted: true});\n    if (errors?.length) {\n      // TODO: print error details\n      const errorMsgs = errors.map((e) => e.toString()).join('\\n');\n      throw new Error(`failed to parse project.yaml.\\n${errorMsgs}`);\n    }\n  }\n}\n\nexport interface BaseDataSource<\n  F = Record<string, unknown>,\n  H extends BaseHandler<F> = BaseHandler<F>,\n  T extends BaseMapping<F, H> = BaseMapping<F, H>\n> {\n  name?: string;\n  kind: string;\n  startBlock?: number;\n  mapping: T;\n}\n\nexport interface BaseMapping<F, T extends BaseHandler<F>> {\n  file: string;\n  handlers: T[];\n}\n\nexport interface BaseHandler<T> {\n  handler: string;\n  kind: string;\n  filter?: T;\n}\n"]}