import { SubqlTerraEventFilter, SubqlTerraHandlerKind, SubqlTerraCustomHandler, SubqlTerraMapping, SubqlTerraHandler, SubqlTerraRuntimeHandler, SubqlTerraRuntimeDatasource, SubqlTerraDatasourceKind, SubqlTerraCustomDatasource, FileReference, CustomDataSourceAsset, SubqlTerraBlockHandler, SubqlTerraEventHandler, SubqlTerraMessageFilter, SubqlTerraTransactionHandler, SubqlTerraMessageHandler } from '@subql/types-terra';
export declare class TerraMessageFilter implements SubqlTerraMessageFilter {
    type: string;
    values?: {
        [key: string]: string;
    };
    contractCall?: string;
}
export declare class TerraEventFilter implements SubqlTerraEventFilter {
    type: string;
    messageFilter?: SubqlTerraMessageFilter;
}
export declare class TerraBlockHandler implements SubqlTerraBlockHandler {
    kind: SubqlTerraHandlerKind.Block;
    handler: string;
}
export declare class TerraTransactionHandler implements SubqlTerraTransactionHandler {
    kind: SubqlTerraHandlerKind.Transaction;
    handler: string;
}
export declare class TerraMessageHandler implements SubqlTerraMessageHandler {
    kind: SubqlTerraHandlerKind.Message;
    handler: string;
    filter?: TerraMessageFilter;
}
export declare class TerraEventHandler implements SubqlTerraEventHandler {
    filter?: SubqlTerraEventFilter;
    kind: SubqlTerraHandlerKind.Event;
    handler: string;
}
export declare class TerraCustomHandler implements SubqlTerraCustomHandler {
    kind: string;
    handler: string;
    filter?: Record<string, unknown>;
}
export declare class TerraMapping implements SubqlTerraMapping {
    handlers: SubqlTerraHandler[];
    file: string;
}
export declare class TerraCustomMapping implements SubqlTerraMapping<SubqlTerraCustomHandler> {
    handlers: TerraCustomHandler[];
    file: string;
}
export declare class TerraRuntimeDataSourceBase<M extends SubqlTerraMapping<SubqlTerraRuntimeHandler>> implements SubqlTerraRuntimeDatasource<M> {
    kind: SubqlTerraDatasourceKind.Runtime;
    mapping: M;
    startBlock: number;
}
export declare class TerraFileReferenceImpl implements FileReference {
    file: string;
}
export declare class TerraCustomDataSourceBase<K extends string, M extends SubqlTerraMapping = SubqlTerraMapping<SubqlTerraCustomHandler>, O = any> implements SubqlTerraCustomDatasource<K, M, O> {
    kind: K;
    mapping: M;
    startBlock?: number;
    assets: Map<string, CustomDataSourceAsset>;
    processor?: FileReference;
}
