"use strict";
// Copyright 2020-2022 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const common_1 = require("@subql/common");
const common_substrate_1 = require("@subql/common-substrate");
const js_yaml_1 = __importDefault(require("js-yaml"));
const rule_1 = require("./rule");
class RequireValidChainTypes {
    constructor() {
        this.type = rule_1.RuleType.Schema;
        this.name = 'require-valid-chaintypes';
        this.description = 'Specified chain types file must match the polkadot RegistryTypes';
    }
    async validateSubstrate(schema, ctx) {
        var _a, _b;
        if (schema.isV0_0_1)
            return true;
        if (schema.isV0_2_0 || schema.isV0_2_1 || schema.isV0_3_0 || schema.isV1_0_0) {
            const schemaV0_2_0 = schema.asV0_2_0;
            // No chain types to validate
            if (!((_a = schemaV0_2_0.network.chaintypes) === null || _a === void 0 ? void 0 : _a.file))
                return true;
            //TODO, skip validate if chaintype is js format for now
            if ((_b = schemaV0_2_0.network.chaintypes) === null || _b === void 0 ? void 0 : _b.file.match(common_1.IPFS_REGEX))
                return true;
            const { ext } = path_1.default.parse(schemaV0_2_0.network.chaintypes.file);
            if (ext === '.js' || ext === '.cjs')
                return true;
            try {
                const rawChainTypes = js_yaml_1.default.load(await ctx.reader.getFile(schemaV0_2_0.network.chaintypes.file));
                (0, common_substrate_1.parseChainTypes)(rawChainTypes);
                return true;
            }
            catch (e) {
                return false;
            }
        }
    }
    async validate(ctx) {
        if (ctx.data.schema instanceof common_substrate_1.SubstrateProjectManifestVersioned) {
            return this.validateSubstrate(ctx.data.schema, ctx);
        }
        else {
            return true;
        }
    }
}
exports.default = RequireValidChainTypes;
//# sourceMappingURL=require-valid-chaintypes.js.map