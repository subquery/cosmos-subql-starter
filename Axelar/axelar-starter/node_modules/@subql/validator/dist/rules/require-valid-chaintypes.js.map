{"version":3,"file":"require-valid-chaintypes.js","sourceRoot":"","sources":["../../src/rules/require-valid-chaintypes.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;AAEtC,gDAAwB;AACxB,0CAAyC;AACzC,8DAA2F;AAC3F,sDAA2B;AAE3B,iCAAsC;AAEtC,MAAqB,sBAAsB;IAA3C;QACE,SAAI,GAAG,eAAQ,CAAC,MAAM,CAAC;QACvB,SAAI,GAAG,0BAA0B,CAAC;QAClC,gBAAW,GAAG,kEAAkE,CAAC;IAiCnF,CAAC;IA/BC,KAAK,CAAC,iBAAiB,CAAC,MAAyC,EAAE,GAAY;;QAC7E,IAAI,MAAM,CAAC,QAAQ;YAAE,OAAO,IAAI,CAAC;QAEjC,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,EAAE;YAC5E,MAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC;YAErC,6BAA6B;YAC7B,IAAI,CAAC,CAAA,MAAA,YAAY,CAAC,OAAO,CAAC,UAAU,0CAAE,IAAI,CAAA;gBAAE,OAAO,IAAI,CAAC;YAExD,uDAAuD;YACvD,IAAI,MAAA,YAAY,CAAC,OAAO,CAAC,UAAU,0CAAE,IAAI,CAAC,KAAK,CAAC,mBAAU,CAAC;gBAAE,OAAO,IAAI,CAAC;YACzE,MAAM,EAAC,GAAG,EAAC,GAAG,cAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC/D,IAAI,GAAG,KAAK,KAAK,IAAI,GAAG,KAAK,MAAM;gBAAE,OAAO,IAAI,CAAC;YAEjD,IAAI;gBACF,MAAM,aAAa,GAAG,iBAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;gBAChG,IAAA,kCAAe,EAAC,aAAa,CAAC,CAAC;gBAC/B,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,KAAK,CAAC;aACd;SACF;IACH,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,GAAY;QACzB,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,YAAY,oDAAiC,EAAE;YAChE,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,MAA2C,EAAE,GAAG,CAAC,CAAC;SAC1F;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;CACF;AApCD,yCAoCC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport path from 'path';\nimport {IPFS_REGEX} from '@subql/common';\nimport {parseChainTypes, SubstrateProjectManifestVersioned} from '@subql/common-substrate';\nimport yaml from 'js-yaml';\nimport {Context} from '../context';\nimport {Rule, RuleType} from './rule';\n\nexport default class RequireValidChainTypes implements Rule {\n  type = RuleType.Schema;\n  name = 'require-valid-chaintypes';\n  description = 'Specified chain types file must match the polkadot RegistryTypes';\n\n  async validateSubstrate(schema: SubstrateProjectManifestVersioned, ctx: Context): Promise<boolean> {\n    if (schema.isV0_0_1) return true;\n\n    if (schema.isV0_2_0 || schema.isV0_2_1 || schema.isV0_3_0 || schema.isV1_0_0) {\n      const schemaV0_2_0 = schema.asV0_2_0;\n\n      // No chain types to validate\n      if (!schemaV0_2_0.network.chaintypes?.file) return true;\n\n      //TODO, skip validate if chaintype is js format for now\n      if (schemaV0_2_0.network.chaintypes?.file.match(IPFS_REGEX)) return true;\n      const {ext} = path.parse(schemaV0_2_0.network.chaintypes.file);\n      if (ext === '.js' || ext === '.cjs') return true;\n\n      try {\n        const rawChainTypes = yaml.load(await ctx.reader.getFile(schemaV0_2_0.network.chaintypes.file));\n        parseChainTypes(rawChainTypes);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  async validate(ctx: Context): Promise<boolean> {\n    if (ctx.data.schema instanceof SubstrateProjectManifestVersioned) {\n      return this.validateSubstrate(ctx.data.schema as SubstrateProjectManifestVersioned, ctx);\n    } else {\n      return true;\n    }\n  }\n}\n"]}