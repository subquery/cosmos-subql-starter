{"version":3,"file":"validator.js","sourceRoot":"","sources":["../src/validator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {getProjectNetwork, NETWORK_FAMILY, Reader, ReaderFactory, ReaderOptions} from '@subql/common';\nimport {parseAlgorandProjectManifest} from '@subql/common-algorand';\nimport {parseSubstrateProjectManifest as parseAvalancheProjectManifest} from '@subql/common-avalanche';\nimport {parseCosmosProjectManifest} from '@subql/common-cosmos';\nimport {parseEthereumProjectManifest} from '@subql/common-ethereum';\nimport {parseEthereumProjectManifest as parseFlareProjectManifest} from '@subql/common-flare';\nimport {parseSubstrateProjectManifest} from '@subql/common-substrate';\nimport {parseTerraProjectManifest} from '@subql/common-terra';\n\nimport {Context} from './context';\nimport {Rule, RuleType} from './rules';\n\nexport interface Report {\n  name: string;\n  skipped: boolean;\n  description: string;\n  valid: boolean;\n}\n\nexport class Validator {\n  private readonly rules: Rule[] = [];\n\n  static async create(location: string, opts?: ReaderOptions, networkFamily?: NETWORK_FAMILY): Promise<Validator> {\n    return new Validator(await ReaderFactory.create(location, opts), location, networkFamily);\n  }\n  constructor(\n    private readonly reader: Reader,\n    private readonly location: string,\n    private readonly networkFamily?: NETWORK_FAMILY\n  ) {}\n\n  addRule(...rules: Rule[]): void {\n    this.rules.push(...rules);\n  }\n\n  async getValidateReports(): Promise<Report[]> {\n    const reports: Report[] = [];\n    const [pkg, rawSchema] = await Promise.all([this.reader.getPkg(), this.reader.getProjectSchema()]);\n\n    if (!rawSchema) {\n      throw new Error('Not a valid SubQuery project, project.yaml is missing');\n    }\n\n    reports.push({\n      name: 'project-yaml-file',\n      description: 'A valid `project.yaml` file must exist in the root directory of the project',\n      valid: !!rawSchema,\n      skipped: false,\n    });\n\n    let schema;\n\n    const networkFamily = this.networkFamily ?? getProjectNetwork(rawSchema);\n    switch (networkFamily) {\n      case NETWORK_FAMILY.substrate:\n        schema = parseSubstrateProjectManifest(rawSchema);\n        if (schema.isV0_0_1) {\n          reports.push({\n            name: 'package-json-file',\n            description: 'A valid `package.json` file must exist in the root directory of the project',\n            valid: !!pkg,\n            skipped: false,\n          });\n        }\n        break;\n      case NETWORK_FAMILY.terra:\n        schema = parseTerraProjectManifest(rawSchema);\n        break;\n      case NETWORK_FAMILY.avalanche:\n        schema = parseAvalancheProjectManifest(rawSchema);\n        break;\n      case NETWORK_FAMILY.cosmos:\n        schema = parseCosmosProjectManifest(rawSchema);\n        break;\n      case NETWORK_FAMILY.algorand:\n        schema = parseAlgorandProjectManifest(rawSchema);\n        break;\n      case NETWORK_FAMILY.ethereum:\n        schema = parseEthereumProjectManifest(rawSchema);\n        break;\n      case NETWORK_FAMILY.flare:\n        schema = parseFlareProjectManifest(rawSchema);\n        break;\n      default:\n        console.error(`Load project failed, please check the manifest file.`);\n        break;\n    }\n\n    const ctx: Context = {\n      data: {\n        projectPath: this.location,\n        pkg,\n        schema,\n      },\n      logger: console,\n      reader: this.reader,\n    };\n\n    for (const r of this.rules) {\n      const report = {\n        name: r.name,\n        description: r.description,\n        valid: false,\n        skipped: false,\n      };\n      if ((!pkg && r.type === RuleType.PackageJSON) || (!schema && r.type === RuleType.Schema)) {\n        report.skipped = true;\n      } else {\n        report.valid = await r.validate(ctx);\n      }\n      reports.push(report);\n    }\n    return reports;\n  }\n\n  async validate(): Promise<boolean> {\n    const reports = await this.getValidateReports();\n    return !reports.some((r) => !r.valid);\n  }\n}\n"]}