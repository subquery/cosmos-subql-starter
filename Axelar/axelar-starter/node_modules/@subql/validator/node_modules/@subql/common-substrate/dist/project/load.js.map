{"version":3,"file":"load.js","sourceRoot":"","sources":["../../src/project/load.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,0CAAkE;AAClE,yDAA+C;AAC/C,qDAA6C;AAC7C,wCAAwC;AACxC,qCAAoC;AACpC,2CAAwF;AAExF,SAAgB,6BAA6B,CAAC,GAAY;IACxD,MAAM,eAAe,GAAG,IAAI,6CAAiC,CAAC,GAA+B,CAAC,CAAC;IAC/F,eAAe,CAAC,QAAQ,EAAE,CAAC;IAC3B,OAAO,eAAe,CAAC;AACzB,CAAC;AAJD,sEAIC;AAED,SAAgB,4BAA4B,CAAC,IAAY;IACvD,MAAM,GAAG,GAAG,IAAA,2BAAkB,EAAC,IAAA,wBAAe,EAAC,IAAI,CAAC,CAAC,CAAC;IACtD,MAAM,eAAe,GAAG,IAAI,6CAAiC,CAAC,GAA+B,CAAC,CAAC;IAC/F,eAAe,CAAC,QAAQ,EAAE,CAAC;IAC3B,OAAO,eAAe,CAAC;AACzB,CAAC;AALD,oEAKC;AACD,SAAgB,eAAe,CAAC,GAAY;IAC1C,MAAM,UAAU,GAAG,IAAA,gCAAY,EAAC,mBAAU,EAAE,GAAG,CAAC,CAAC;IACjD,IACE,CAAC,CAAC,UAAU,CAAC,KAAK;QAClB,CAAC,CAAC,UAAU,CAAC,UAAU;QACvB,CAAC,CAAC,UAAU,CAAC,WAAW;QACxB,CAAC,CAAC,UAAU,CAAC,UAAU;QACvB,CAAC,CAAC,UAAU,CAAC,SAAS,EACtB;QACA,MAAM,MAAM,GAAG,IAAA,8BAAY,EAAC,UAAU,EAAE,EAAC,SAAS,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAC,CAAC,CAAC;QACvF,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,EAAE;YAClB,4BAA4B;YAC5B,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7D,MAAM,IAAI,KAAK,CAAC,iCAAiC,SAAS,EAAE,CAAC,CAAC;SAC/D;QACD,OAAO,UAAU,CAAC;KACnB;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC5C;AACH,CAAC;AAnBD,0CAmBC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {getManifestPath, loadFromJsonOrYaml} from '@subql/common';\nimport {plainToClass} from 'class-transformer';\nimport {validateSync} from 'class-validator';\n// import {NodeVM, VMScript} from 'vm2';\nimport {ChainTypes} from './models';\nimport {SubstrateProjectManifestVersioned, VersionedProjectManifest} from './versioned';\n\nexport function parseSubstrateProjectManifest(raw: unknown): SubstrateProjectManifestVersioned {\n  const projectManifest = new SubstrateProjectManifestVersioned(raw as VersionedProjectManifest);\n  projectManifest.validate();\n  return projectManifest;\n}\n\nexport function loadSubstrateProjectManifest(file: string): SubstrateProjectManifestVersioned {\n  const doc = loadFromJsonOrYaml(getManifestPath(file));\n  const projectManifest = new SubstrateProjectManifestVersioned(doc as VersionedProjectManifest);\n  projectManifest.validate();\n  return projectManifest;\n}\nexport function parseChainTypes(raw: unknown): ChainTypes {\n  const chainTypes = plainToClass(ChainTypes, raw);\n  if (\n    !!chainTypes.types ||\n    !!chainTypes.typesChain ||\n    !!chainTypes.typesBundle ||\n    !!chainTypes.typesAlias ||\n    !!chainTypes.typesSpec\n  ) {\n    const errors = validateSync(chainTypes, {whitelist: true, forbidNonWhitelisted: true});\n    if (errors?.length) {\n      // TODO: print error details\n      const errorMsgs = errors.map((e) => e.toString()).join('\\n');\n      throw new Error(`failed to parse chain types.\\n${errorMsgs}`);\n    }\n    return chainTypes;\n  } else {\n    throw new Error(`chainTypes is not valid`);\n  }\n}\n"]}