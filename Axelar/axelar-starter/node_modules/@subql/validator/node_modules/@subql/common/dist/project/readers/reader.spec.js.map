{"version":3,"file":"reader.spec.js","sourceRoot":"","sources":["../../../src/project/readers/reader.spec.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;AAEtC,4CAAoB;AACpB,gDAAwB;AACxB,mDAA6C;AAC7C,+CAAyC;AACzC,iDAA2C;AAC3C,qCAAuC;AAEvC,MAAM,OAAO,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,0CAA0C,CAAC,CAAC;AAEjF,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,GAAG,GAAG,2CAA2C,CAAC;QACxD,MAAM,MAAM,GAAG,MAAM,sBAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC/C,MAAM,CAAC,MAAM,YAAY,4BAAY,CAAC,CAAC,UAAU,EAAE,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,GAAG,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;QACtD,MAAM,MAAM,GAAG,MAAM,sBAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC/C,MAAM,CAAC,MAAM,YAAY,0BAAW,CAAC,CAAC,UAAU,EAAE,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC1D,MAAM,GAAG,GAAG,uDAAuD,CAAC;QACpE,MAAM,MAAM,GAAG,MAAM,sBAAa,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAEnD,MAAM,CAAC,MAAM,YAAY,wBAAU,CAAC,CAAC,UAAU,EAAE,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC1D,MAAM,GAAG,GAAG,oEAAoE,CAAC;QACjF,MAAM,MAAM,GAAG,MAAM,sBAAa,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACnD,MAAM,CAAC,MAAM,YAAY,wBAAU,CAAC,CAAC,UAAU,EAAE,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,IAAI,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,MAAM,GAAG,MAAM,sBAAa,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACnD,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC;QAC9B,MAAM,CAAC,YAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,MAAM,CAAC,GAAG,EAAE,CAAC,sBAAa,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IACjG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACrD,MAAM,MAAM,CAAC,GAAG,EAAE,CAAC,sBAAa,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAC7E,oCAAoC,CACrC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {GithubReader} from './github-reader';\nimport {IPFSReader} from './ipfs-reader';\nimport {LocalReader} from './local-reader';\nimport {ReaderFactory} from './reader';\n\nconst tarPath = path.join(__dirname, '/../../../test/mockedSubqueryProject.tgz');\n\ndescribe('ReaderFactory', () => {\n  it('should return the Github Reader', async () => {\n    const url = 'https://github.com/subquery/subql-starter';\n    const reader = await ReaderFactory.create(url);\n    expect(reader instanceof GithubReader).toBeTruthy();\n  });\n\n  it('should return the Local Reader', async () => {\n    const loc = path.join(__dirname, '../../../fixtures');\n    const reader = await ReaderFactory.create(loc);\n    expect(reader instanceof LocalReader).toBeTruthy();\n  });\n\n  it('should return the IPFS Reader for a CID v0', async () => {\n    const loc = 'ipfs://QmYyCCSaHLpPvZmex5ExHGdW7mavKYeiixVEyvNGwD1LLw';\n    const reader = await ReaderFactory.create(loc, {});\n\n    expect(reader instanceof IPFSReader).toBeTruthy();\n  });\n\n  it('should return the IPFS Reader for a CID v1', async () => {\n    const loc = 'ipfs://bafybeie56fq7db5adfyt3afqwhje6pq2m77gn5ik6pg75bioger6kzjn6a';\n    const reader = await ReaderFactory.create(loc, {});\n    expect(reader instanceof IPFSReader).toBeTruthy();\n  });\n\n  it.skip('should support archive files', async () => {\n    const reader = await ReaderFactory.create(tarPath);\n    const finalPath = reader.root;\n    expect(fs.existsSync(finalPath)).toBeTruthy();\n  });\n\n  it('throw error if getProjectRootAndManifest path not exist', async () => {\n    await expect(() => ReaderFactory.create('path/not/exist')).rejects.toThrow(/unknown location/);\n  });\n\n  it('throw error if ipfs path is not valid', async () => {\n    await expect(() => ReaderFactory.create('ipfs://notValid', {})).rejects.toThrow(\n      /IPFS project path CID is not valid/\n    );\n  });\n});\n"]}