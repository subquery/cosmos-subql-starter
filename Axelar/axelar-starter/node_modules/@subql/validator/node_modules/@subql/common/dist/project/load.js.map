{"version":3,"file":"load.js","sourceRoot":"","sources":["../../src/project/load.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;AAEtC,4CAAoB;AACpB,gDAAwB;AACxB,sDAA2B;AAC3B,mCAA2B;AAC3B,4CAA2D;AAE3D,SAAgB,kBAAkB,CAAC,IAAY;IAC7C,MAAM,EAAC,GAAG,EAAC,GAAG,cAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC/B,IAAI,GAAG,KAAK,OAAO,IAAI,GAAG,KAAK,MAAM,IAAI,GAAG,KAAK,OAAO,EAAE;QACxD,MAAM,IAAI,KAAK,CAAC,aAAa,GAAG,gBAAgB,CAAC,CAAC;KACnD;IACD,MAAM,UAAU,GAAG,YAAE,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAClD,OAAO,iBAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC/B,CAAC;AAPD,gDAOC;AAED,SAAgB,eAAe,CAAC,IAAY;IAC1C,IAAI,YAAY,GAAG,IAAI,CAAC;IACxB,IAAI,YAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,YAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE;QAC3D,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QACrD,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QACrD,IAAI,YAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;YAC/B,YAAY,GAAG,YAAY,CAAC;SAC7B;aAAM,IAAI,YAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;YACtC,YAAY,GAAG,YAAY,CAAC;SAC7B;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,6CAA6C,IAAI,EAAE,CAAC,CAAC;SACtE;KACF;IACD,OAAO,YAAY,CAAC;AACtB,CAAC;AAdD,0CAcC;AAED,SAAgB,aAAa,CAAC,IAAY;IACxC,MAAM,QAAQ,GAAG,kBAAkB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,IAAK,QAAgB,CAAC,WAAW,KAAK,OAAO,EAAE;QAC7C,OAAO,cAAI,CAAC,IAAI,CAAC,IAAI,EAAG,QAAgB,CAAC,MAAM,CAAC,CAAC;KAClD;IACD,MAAM,OAAO,GAAG,QAAiC,CAAC;IAClD,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;KAClD;IACD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE;QACxB,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;KACxD;IACD,OAAO,cAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC9C,CAAC;AAbD,sCAaC;AAED,8CAA8C;AAC9C,SAAgB,iBAAiB,CAAC,WAAoB;IACpD,IAAI,IAAA,YAAG,EAAE,WAAmB,CAAC,WAAW,EAAE,OAAO,CAAC,EAAE;QAClD,MAAM,OAAO,GAAG,yBAAa,CAAE,WAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAkC,CAAC,CAAC;QACnG,IAAI,OAAO,KAAK,SAAS,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,qDAAsD,WAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;SAC/G;QACD,OAAO,OAAO,CAAC;KAChB;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;KAC9E;AACH,CAAC;AAVD,8CAUC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport yaml from 'js-yaml';\nimport {gte} from 'semver';\nimport {NETWORK_FAMILY, runnerMapping} from '../constants';\nimport {ProjectManifestV0_2_0} from '../project/versioned';\nexport function loadFromJsonOrYaml(file: string): unknown {\n  const {ext} = path.parse(file);\n  if (ext !== '.yaml' && ext !== '.yml' && ext !== '.json') {\n    throw new Error(`Extension ${ext} not supported`);\n  }\n  const rawContent = fs.readFileSync(file, 'utf-8');\n  return yaml.load(rawContent);\n}\n\nexport function getManifestPath(file: string): string {\n  let manifestPath = file;\n  if (fs.existsSync(file) && fs.lstatSync(file).isDirectory()) {\n    const yamlFilePath = path.join(file, 'project.yaml');\n    const jsonFilePath = path.join(file, 'project.json');\n    if (fs.existsSync(yamlFilePath)) {\n      manifestPath = yamlFilePath;\n    } else if (fs.existsSync(jsonFilePath)) {\n      manifestPath = jsonFilePath;\n    } else {\n      throw new Error(`Could not find project manifest under dir ${file}`);\n    }\n  }\n  return manifestPath;\n}\n\nexport function getSchemaPath(file: string) {\n  const yamlFile = loadFromJsonOrYaml(getManifestPath(file));\n  if ((yamlFile as any).specVersion === '0.0.1') {\n    return path.join(file, (yamlFile as any).schema);\n  }\n  const project = yamlFile as ProjectManifestV0_2_0;\n  if (!project.schema) {\n    throw new Error(`Can't get schema in yaml file`);\n  }\n  if (!project.schema.file) {\n    throw new Error(`schemaPath expect to be schema.file`);\n  }\n  return path.join(file, project.schema.file);\n}\n\n// Only work for manifest specVersion >= 1.0.0\nexport function getProjectNetwork(rawManifest: unknown): NETWORK_FAMILY {\n  if (gte((rawManifest as any).specVersion, '1.0.0')) {\n    const network = runnerMapping[(rawManifest as any).runner.node.name as keyof typeof runnerMapping];\n    if (network === undefined) {\n      throw new Error(`Can not identify project network with runner node ${(rawManifest as any).runner.node.name}`);\n    }\n    return network;\n  } else {\n    throw new Error('Can not identify project network under spec version 1.0.0');\n  }\n}\n"]}