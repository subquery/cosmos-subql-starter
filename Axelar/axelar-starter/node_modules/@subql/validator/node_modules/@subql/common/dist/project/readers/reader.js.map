{"version":3,"file":"reader.js","sourceRoot":"","sources":["../../../src/project/readers/reader.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;AAEtC,4CAAoB;AAEpB,+CAA2C;AAC3C,2CAAwD;AACxD,mDAA6C;AAC7C,+CAAyC;AACzC,iDAA2C;AAa3C,MAAa,aAAa;IACxB,4DAA4D;IAC5D,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAgB,EAAE,OAAuB;QAC3D,iEAAiE;QACjE,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;QAChF,IAAI,WAAW,EAAE;YACf,OAAO,IAAI,4BAAY,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SACzC;QAED,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,sBAAU,CAAC,CAAC;QAC7C,IAAI,SAAS,EAAE;YACb,OAAO,IAAI,wBAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;SACtE;QAED,YAAY;QACZ,IAAI,YAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;YAC3B,MAAM,OAAO,GAAG,IAAA,mCAAyB,EAAC,QAAQ,CAAC,CAAC;YACpD,OAAO,IAAI,0BAAW,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;SACxD;QAED,MAAM,IAAI,KAAK,CAAC,qBAAqB,QAAQ,EAAE,CAAC,CAAC;IACnD,CAAC;CACF;AAtBD,sCAsBC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport {IPackageJson} from 'package-json-type';\nimport {IPFS_REGEX} from '../../constants';\nimport {getProjectRootAndManifest} from '../../project';\nimport {GithubReader} from './github-reader';\nimport {IPFSReader} from './ipfs-reader';\nimport {LocalReader} from './local-reader';\n\nexport type ReaderOptions = {\n  ipfs?: string;\n};\n\nexport interface Reader {\n  getProjectSchema(): Promise<unknown | undefined>;\n  getPkg(): Promise<IPackageJson | undefined>;\n  getFile(file: string): Promise<string | undefined>;\n  root: string | undefined;\n}\n\nexport class ReaderFactory {\n  // eslint-disable-next-line @typescript-eslint/require-await\n  static async create(location: string, options?: ReaderOptions): Promise<Reader> {\n    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n    const githubMatch = location.match(/https:\\/\\/github.com\\/([\\w-_]+\\/[\\w-_]+)/i);\n    if (githubMatch) {\n      return new GithubReader(githubMatch[1]);\n    }\n\n    const ipfsMatch = location.match(IPFS_REGEX);\n    if (ipfsMatch) {\n      return new IPFSReader(location.replace('ipfs://', ''), options.ipfs);\n    }\n\n    //local mode\n    if (fs.existsSync(location)) {\n      const project = getProjectRootAndManifest(location);\n      return new LocalReader(project.root, project.manifest);\n    }\n\n    throw new Error(`unknown location: ${location}`);\n  }\n}\n"]}