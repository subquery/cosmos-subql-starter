{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {AnyTuple, Codec} from '@polkadot/types-codec/types';\nimport {GenericExtrinsic} from '@polkadot/types/extrinsic';\nimport {EventRecord, SignedBlock} from '@polkadot/types/interfaces';\nimport {IEvent} from '@polkadot/types/types';\n\nexport interface Entity {\n  id: string;\n}\n\nexport type FunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends Function ? K : never;\n}[keyof T];\n\nexport interface Store {\n  get(entity: string, id: string): Promise<Entity | null>;\n  getByField(entity: string, field: string, value: any, options?: {offset?: number; limit?: number}): Promise<Entity[]>;\n  getOneByField(entity: string, field: string, value: any): Promise<Entity | null>;\n  set(entity: string, id: string, data: Entity): Promise<void>;\n  bulkCreate(entity: string, data: Entity[]): Promise<void>;\n  //if fields in provided, only specify fields will be updated\n  bulkUpdate(entity: string, data: Entity[], fields?: string[]): Promise<void>;\n  remove(entity: string, id: string): Promise<void>;\n}\n\nexport interface SubstrateBlock extends SignedBlock {\n  // parent block's spec version, can be used to decide the correct metadata that should be used for this block.\n  specVersion: number;\n  timestamp: Date;\n  events: EventRecord[];\n}\n\nexport interface SubstrateExtrinsic<A extends AnyTuple = AnyTuple> {\n  // index in the block\n  idx: number;\n  extrinsic: GenericExtrinsic<A>;\n  block: SubstrateBlock;\n  events: TypedEventRecord<Codec[]>[];\n  success: boolean;\n}\n\nexport interface SubstrateEvent<T extends AnyTuple = AnyTuple> extends TypedEventRecord<T> {\n  // index in the block\n  idx: number;\n  extrinsic?: SubstrateExtrinsic;\n  block: SubstrateBlock;\n}\n\nexport type DynamicDatasourceCreator = (name: string, args: Record<string, unknown>) => Promise<void>;\n\nexport type TypedEventRecord<T extends AnyTuple> = Omit<EventRecord, 'event'> & {\n  event: IEvent<T>;\n};\n"]}