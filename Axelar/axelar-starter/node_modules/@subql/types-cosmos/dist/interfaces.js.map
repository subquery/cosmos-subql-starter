{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {DecodedTxRaw} from '@cosmjs/proto-signing';\nimport {Block} from '@cosmjs/stargate';\nimport {Event, Log} from '@cosmjs/stargate/build/logs';\nimport {TxData} from '@cosmjs/tendermint-rpc';\n\nexport interface Entity {\n  id: string;\n}\n\nexport type FunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends Function ? K : never;\n}[keyof T];\n\nexport interface Store {\n  get(entity: string, id: string): Promise<Entity | null>;\n  getByField(entity: string, field: string, value: any, options?: {offset?: number; limit?: number}): Promise<Entity[]>;\n  getOneByField(entity: string, field: string, value: any): Promise<Entity | null>;\n  set(entity: string, id: string, data: Entity): Promise<void>;\n  bulkCreate(entity: string, data: Entity[]): Promise<void>;\n  //if fields in provided, only specify fields will be updated\n  bulkUpdate(entity: string, data: Entity[], fields?: string[]): Promise<void>;\n  remove(entity: string, id: string): Promise<void>;\n}\n\nexport interface CosmosBlock {\n  block: Block;\n  txs: TxData[];\n}\n\nexport interface CosmosTransaction {\n  idx: number;\n  block: CosmosBlock;\n  hash: string;\n  tx: TxData;\n  decodedTx: DecodedTxRaw;\n}\n\nexport interface CosmosMessage<T = any> {\n  idx: number;\n  block: CosmosBlock;\n  tx: CosmosTransaction;\n  msg: {\n    typeUrl: string;\n    decodedMsg: T;\n  };\n}\n\nexport interface CosmosEvent {\n  idx: number;\n  block: CosmosBlock;\n  tx: CosmosTransaction;\n  msg: CosmosMessage;\n  log: Log;\n  event: Event;\n}\n\nexport type DynamicDatasourceCreator = (name: string, args: Record<string, unknown>) => Promise<void>;\n"]}