import { DecodedTxRaw } from '@cosmjs/proto-signing';
import { Block } from '@cosmjs/stargate';
import { Event, Log } from '@cosmjs/stargate/build/logs';
import { TxData } from '@cosmjs/tendermint-rpc';
export interface Entity {
    id: string;
}
export declare type FunctionPropertyNames<T> = {
    [K in keyof T]: T[K] extends Function ? K : never;
}[keyof T];
export interface Store {
    get(entity: string, id: string): Promise<Entity | null>;
    getByField(entity: string, field: string, value: any, options?: {
        offset?: number;
        limit?: number;
    }): Promise<Entity[]>;
    getOneByField(entity: string, field: string, value: any): Promise<Entity | null>;
    set(entity: string, id: string, data: Entity): Promise<void>;
    bulkCreate(entity: string, data: Entity[]): Promise<void>;
    bulkUpdate(entity: string, data: Entity[], fields?: string[]): Promise<void>;
    remove(entity: string, id: string): Promise<void>;
}
export interface CosmosBlock {
    block: Block;
    txs: TxData[];
}
export interface CosmosTransaction {
    idx: number;
    block: CosmosBlock;
    hash: string;
    tx: TxData;
    decodedTx: DecodedTxRaw;
}
export interface CosmosMessage<T = any> {
    idx: number;
    block: CosmosBlock;
    tx: CosmosTransaction;
    msg: {
        typeUrl: string;
        decodedMsg: T;
    };
}
export interface CosmosEvent {
    idx: number;
    block: CosmosBlock;
    tx: CosmosTransaction;
    msg: CosmosMessage;
    log: Log;
    event: Event;
}
export declare type DynamicDatasourceCreator = (name: string, args: Record<string, unknown>) => Promise<void>;
