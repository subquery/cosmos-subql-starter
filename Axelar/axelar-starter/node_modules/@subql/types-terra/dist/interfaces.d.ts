import { BlockInfo, Event, TxInfo, TxLog, Msg, WasmMsg } from '@terra-money/terra.js';
export interface Entity {
    id: string;
}
export declare type FunctionPropertyNames<T> = {
    [K in keyof T]: T[K] extends Function ? K : never;
}[keyof T];
export interface Store {
    get(entity: string, id: string): Promise<Entity | null>;
    getByField(entity: string, field: string, value: any): Promise<Entity[]>;
    getOneByField(entity: string, field: string, value: any): Promise<Entity | null>;
    set(entity: string, id: string, data: Entity): Promise<void>;
    bulkCreate(entity: string, data: Entity[]): Promise<void>;
    remove(entity: string, id: string): Promise<void>;
}
export interface TerraBlock {
    block: BlockInfo;
    txs: TxInfo[];
}
export interface TerraTransaction {
    idx: number;
    block: TerraBlock;
    tx: TxInfo;
}
export interface TerraMessage<M extends Msg = Msg> {
    idx: number;
    block: TerraBlock;
    tx: TerraTransaction;
    msg: M;
}
export interface TerraEvent<M extends Msg = Msg> {
    idx: number;
    block: TerraBlock;
    tx: TerraTransaction;
    msg: TerraMessage<M>;
    log: TxLog;
    event: Event;
}
export declare type TerraContractMessage = TerraMessage<WasmMsg>;
export declare type DynamicDatasourceCreator = (name: string, args: Record<string, unknown>) => Promise<void>;
