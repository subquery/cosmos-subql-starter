{"version":3,"file":"project.js","sourceRoot":"","sources":["../src/project.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAatC,IAAY,uBAEX;AAFD,WAAY,uBAAuB;IACjC,wDAA6B,CAAA;AAC/B,CAAC,EAFW,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAElC;AAED,IAAY,oBAIX;AAJD,WAAY,oBAAoB;IAC9B,wDAAgC,CAAA;IAChC,6DAAqC,CAAA;IACrC,sDAA8B,CAAA;AAChC,CAAC,EAJW,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAI/B","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {RegistryTypes} from '@polkadot/types/types';\nimport {\n  AvalancheBlock,\n  AvalancheBlockFilter,\n  AvalancheLog,\n  AvalancheLogFilter,\n  AvalancheTransaction,\n  AvalancheTransactionFilter,\n} from './avalanche';\nimport {ApiWrapper} from './interfaces';\n\nexport enum AvalancheDatasourceKind {\n  Runtime = 'avalanche/Runtime',\n}\n\nexport enum AvalancheHandlerKind {\n  Block = 'avalanche/BlockHandler',\n  Call = 'avalanche/TransactionHandler',\n  Event = 'avalanche/LogHandler',\n}\n\nexport type AvalancheRuntimeHandlerInputMap = {\n  [AvalancheHandlerKind.Block]: AvalancheBlock;\n  [AvalancheHandlerKind.Call]: AvalancheTransaction;\n  [AvalancheHandlerKind.Event]: AvalancheLog;\n};\n\ntype AvalancheRuntimeFilterMap = {\n  [AvalancheHandlerKind.Block]: AvalancheBlockFilter;\n  [AvalancheHandlerKind.Call]: AvalancheTransactionFilter;\n  [AvalancheHandlerKind.Event]: AvalancheLogFilter;\n};\n\nexport interface ProjectManifest {\n  specVersion: string;\n  description: string;\n  repository: string;\n\n  schema: string;\n\n  network: {\n    endpoint: string;\n    customTypes?: RegistryTypes;\n  };\n\n  dataSources: SubqlDatasource[];\n}\n\nexport interface SubqlBlockHandler {\n  handler: string;\n  kind: AvalancheHandlerKind.Block;\n  filter?: AvalancheBlockFilter;\n}\n\nexport interface SubqlCallHandler {\n  handler: string;\n  kind: AvalancheHandlerKind.Call;\n  filter?: AvalancheTransactionFilter;\n}\n\nexport interface SubqlEventHandler {\n  handler: string;\n  kind: AvalancheHandlerKind.Event;\n  filter?: AvalancheLogFilter;\n}\n\nexport interface SubqlCustomHandler<K extends string = string, F = Record<string, unknown>> {\n  handler: string;\n  kind: K;\n  filter?: F;\n}\n\nexport type SubqlRuntimeHandler = SubqlBlockHandler | SubqlCallHandler | SubqlEventHandler;\n\nexport type SubqlHandler = SubqlRuntimeHandler | SubqlCustomHandler<string, unknown>;\n\nexport type SubqlHandlerFilter = AvalancheBlockFilter | AvalancheTransactionFilter | AvalancheLogFilter;\n\nexport interface SubqlMapping<T extends SubqlHandler = SubqlHandler> {\n  file: string;\n  handlers: T[];\n}\n\ninterface ISubqlDatasource<M extends SubqlMapping> {\n  name?: string;\n  kind: string;\n  startBlock?: number;\n  mapping: M;\n}\n\nexport interface SubqlRuntimeDatasource<M extends SubqlMapping<SubqlRuntimeHandler> = SubqlMapping<SubqlRuntimeHandler>>\n  extends ISubqlDatasource<M> {\n  kind: AvalancheDatasourceKind.Runtime;\n  options?: any;\n  assets?: Map<string, {file: string}>;\n}\n\nexport interface SubqlNetworkFilter {\n  specName?: string;\n}\n\nexport type SubqlDatasource = SubqlRuntimeDatasource | SubqlCustomDatasource; // | SubqlBuiltinDataSource;\n\nexport interface FileReference {\n  file: string;\n}\n\nexport type CustomDataSourceAsset = FileReference;\n\nexport type Processor<O = any> = FileReference & {options?: O};\n\nexport interface SubqlCustomDatasource<\n  K extends string = string,\n  M extends SubqlMapping = SubqlMapping<SubqlCustomHandler>,\n  O = any\n> extends ISubqlDatasource<M> {\n  kind: K;\n  assets: Map<string, CustomDataSourceAsset>;\n  processor: Processor<O>;\n}\n\n//export type SubqlBuiltinDataSource = ISubqlDatasource;\n\nexport interface HandlerInputTransformer_0_0_0<\n  T extends AvalancheHandlerKind,\n  E,\n  DS extends SubqlCustomDatasource = SubqlCustomDatasource\n> {\n  (input: AvalancheRuntimeHandlerInputMap[T], ds: DS, api: ApiWrapper, assets?: Record<string, string>): Promise<E>; //  | SubstrateBuiltinDataSource\n}\n\nexport interface HandlerInputTransformer_1_0_0<\n  T extends AvalancheHandlerKind,\n  F,\n  E,\n  DS extends SubqlCustomDatasource = SubqlCustomDatasource\n> {\n  (params: {\n    input: AvalancheRuntimeHandlerInputMap[T];\n    ds: DS;\n    filter?: F;\n    api: ApiWrapper;\n    assets?: Record<string, string>;\n  }): Promise<E[]>; //  | SubstrateBuiltinDataSource\n}\n\nexport interface DictionaryQueryCondition {\n  field: string;\n  value: string;\n}\n\nexport interface DictionaryQueryEntry {\n  entity: string;\n  conditions: DictionaryQueryCondition[];\n}\n\nexport type SecondLayerHandlerProcessorArray<\n  K extends string,\n  F,\n  T,\n  DS extends SubqlCustomDatasource<K> = SubqlCustomDatasource<K>\n> =\n  | SecondLayerHandlerProcessor<AvalancheHandlerKind.Block, F, T, DS>\n  | SecondLayerHandlerProcessor<AvalancheHandlerKind.Call, F, T, DS>\n  | SecondLayerHandlerProcessor<AvalancheHandlerKind.Event, F, T, DS>;\n\nexport interface SubqlDatasourceProcessor<\n  K extends string,\n  F,\n  DS extends SubqlCustomDatasource<K> = SubqlCustomDatasource<K>,\n  P extends Record<string, SecondLayerHandlerProcessorArray<K, F, any, DS>> = Record<\n    string,\n    SecondLayerHandlerProcessorArray<K, F, any, DS>\n  >\n> {\n  kind: K;\n  validate(ds: DS, assets: Record<string, string>): void;\n  dsFilterProcessor(ds: DS, api: ApiWrapper): boolean;\n  handlerProcessors: P;\n}\n\ninterface SecondLayerHandlerProcessorBase<\n  K extends AvalancheHandlerKind,\n  F,\n  DS extends SubqlCustomDatasource = SubqlCustomDatasource\n> {\n  baseHandlerKind: K;\n  baseFilter: AvalancheRuntimeFilterMap[K] | AvalancheRuntimeFilterMap[K][];\n  filterValidator: (filter?: F) => void;\n  dictionaryQuery?: (filter: F, ds: DS) => DictionaryQueryEntry | undefined;\n}\n\nexport interface SecondLayerHandlerProcessor_0_0_0<\n  K extends AvalancheHandlerKind,\n  F,\n  E,\n  DS extends SubqlCustomDatasource = SubqlCustomDatasource\n> extends SecondLayerHandlerProcessorBase<K, F, DS> {\n  specVersion: undefined;\n  transformer: HandlerInputTransformer_0_0_0<K, E, DS>;\n  filterProcessor: (filter: F | undefined, input: AvalancheRuntimeHandlerInputMap[K], ds: DS) => boolean;\n}\n\nexport interface SecondLayerHandlerProcessor_1_0_0<\n  K extends AvalancheHandlerKind,\n  F,\n  E,\n  DS extends SubqlCustomDatasource = SubqlCustomDatasource\n> extends SecondLayerHandlerProcessorBase<K, F, DS> {\n  specVersion: '1.0.0';\n  transformer: HandlerInputTransformer_1_0_0<K, F, E, DS>;\n  filterProcessor: (params: {filter: F | undefined; input: AvalancheRuntimeHandlerInputMap[K]; ds: DS}) => boolean;\n}\n\nexport type SecondLayerHandlerProcessor<\n  K extends AvalancheHandlerKind,\n  F,\n  E,\n  DS extends SubqlCustomDatasource = SubqlCustomDatasource\n> = SecondLayerHandlerProcessor_0_0_0<K, F, E, DS> | SecondLayerHandlerProcessor_1_0_0<K, F, E, DS>;\n"]}