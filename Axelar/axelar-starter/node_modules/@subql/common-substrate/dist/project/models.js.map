{"version":3,"file":"models.js","sourceRoot":"","sources":["../../src/project/models.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;;;;;;;AAKtC,wCAgBsB;AACtB,yDAAgE;AAChE,qDAUyB;AAEzB,MAAa,WAAW;CAWvB;AAVC;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,yBAAO,GAAE;IACT,IAAA,8BAAY,EAAC,CAAC,CAAC;;gDACe;AAC/B;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,uBAAK,GAAE;;2CACQ;AAChB;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,0BAAQ,GAAE;;8CACQ;AAVrB,kCAWC;AAED,MAAa,WAAY,SAAQ,WAAW;CAO3C;AANC;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,0BAAQ,GAAE;;2CACK;AAChB;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,0BAAQ,GAAE;;2CACK;AANlB,kCAOC;AAED,MAAa,UAAU;CAgBtB;AAfC;IAAC,IAAA,0BAAQ,GAAE;IACV,IAAA,4BAAU,GAAE;;yCACS;AACtB;IAAC,IAAA,0BAAQ,GAAE;IACV,IAAA,4BAAU,GAAE;;8CACmC;AAChD;IAAC,IAAA,0BAAQ,GAAE;IACV,IAAA,4BAAU,GAAE;;+CACoB;AACjC;IAAC,IAAA,0BAAQ,GAAE;IACV,IAAA,4BAAU,GAAE;;8CAC8B;AAC3C;IAAC,IAAA,0BAAQ,GAAE;IACV,IAAA,4BAAU,GAAE;;6CAC6B;AAf5C,gCAgBC;AAED,MAAa,UAAW,SAAQ,WAAW;CAI1C;AAHC;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,2BAAS,GAAE;;2CACM;AAHpB,gCAIC;AAED,MAAa,YAAY;CASxB;AARC;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,gCAAc,GAAE;IAChB,IAAA,wBAAI,EAAC,GAAG,EAAE,CAAC,WAAW,CAAC;;4CACM;AAC9B;IAAC,IAAA,wBAAM,EAAC,4BAAoB,EAAE,EAAC,MAAM,EAAE,CAAC,4BAAoB,CAAC,KAAK,CAAC,EAAC,CAAC;;0CACpC;AACjC;IAAC,IAAA,0BAAQ,GAAE;;6CACK;AARlB,oCASC;AAED,MAAa,WAAW;CASvB;AARC;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,gCAAc,GAAE;IAChB,IAAA,wBAAI,EAAC,GAAG,EAAE,CAAC,UAAU,CAAC;;2CACM;AAC7B;IAAC,IAAA,wBAAM,EAAC,4BAAoB,EAAE,EAAC,MAAM,EAAE,CAAC,4BAAoB,CAAC,IAAI,CAAC,EAAC,CAAC;;yCACpC;AAChC;IAAC,IAAA,0BAAQ,GAAE;;4CACK;AARlB,kCASC;AAED,MAAa,YAAY;CASxB;AARC;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,gCAAc,GAAE;IAChB,IAAA,wBAAI,EAAC,GAAG,EAAE,CAAC,WAAW,CAAC;;4CACM;AAC9B;IAAC,IAAA,wBAAM,EAAC,4BAAoB,EAAE,EAAC,MAAM,EAAE,CAAC,4BAAoB,CAAC,KAAK,CAAC,EAAC,CAAC;;0CACpC;AACjC;IAAC,IAAA,0BAAQ,GAAE;;6CACK;AARlB,oCASC;AAED,MAAa,aAAa;CAQzB;AAPC;IAAC,IAAA,0BAAQ,GAAE;;2CACE;AACb;IAAC,IAAA,0BAAQ,GAAE;;8CACK;AAChB;IAAC,IAAA,0BAAQ,GAAE;IACV,IAAA,4BAAU,GAAE;;6CACoB;AAPnC,sCAQC;AAED,MAAa,cAAc;CAqB1B;AApBC;IAAC,IAAA,6BAAS,EAAC,CAAC,MAAM,EAAE,EAAE;QACpB,MAAM,QAAQ,GAA8B,MAAM,CAAC,KAAK,CAAC;QACzD,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;YAC9B,QAAQ,OAAO,CAAC,IAAI,EAAE;gBACpB,KAAK,4BAAoB,CAAC,KAAK;oBAC7B,OAAO,IAAA,gCAAY,EAAC,YAAY,EAAE,OAAO,CAAC,CAAC;gBAC7C,KAAK,4BAAoB,CAAC,IAAI;oBAC5B,OAAO,IAAA,gCAAY,EAAC,WAAW,EAAE,OAAO,CAAC,CAAC;gBAC5C,KAAK,4BAAoB,CAAC,KAAK;oBAC7B,OAAO,IAAA,gCAAY,EAAC,YAAY,EAAE,OAAO,CAAC,CAAC;gBAC7C;oBACE,MAAM,IAAI,KAAK,CAAC,WAAY,OAAe,CAAC,IAAI,gBAAgB,CAAC,CAAC;aACrE;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IACD,IAAA,yBAAO,GAAE;IACT,IAAA,gCAAc,GAAE;;gDACmB;AACpC;IAAC,IAAA,0BAAQ,GAAE;;4CACE;AApBf,wCAqBC;AAED,MAAa,aAAa;CAOzB;AANC;IAAC,IAAA,yBAAO,GAAE;IACT,IAAA,wBAAI,EAAC,GAAG,EAAE,CAAC,aAAa,CAAC;IACzB,IAAA,gCAAc,GAAE;;+CACS;AAC1B;IAAC,IAAA,0BAAQ,GAAE;;2CACE;AANf,sCAOC;AAED,MAAa,sBAAsB;CAIlC;AAHC;IAAC,IAAA,0BAAQ,GAAE;IACV,IAAA,4BAAU,GAAE;;wDACK;AAHpB,wDAIC;AAED,MAAa,qBAAqB;CAajC;AAZC;IAAC,IAAA,wBAAM,EAAC,+BAAuB,EAAE,EAAC,MAAM,EAAE,CAAC,+BAAuB,CAAC,OAAO,CAAC,EAAC,CAAC;;mDACvC;AACtC;IAAC,IAAA,wBAAI,EAAC,GAAG,EAAE,CAAC,cAAc,CAAC;IAC1B,IAAA,gCAAc,GAAE;8BACR,cAAc;sDAAC;AACxB;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,uBAAK,GAAE;;yDACY;AACpB;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,gCAAc,GAAE;IAChB,IAAA,wBAAI,EAAC,GAAG,EAAE,CAAC,sBAAsB,CAAC;;qDACH;AAZlC,sDAaC;AAED,MAAa,iBAAiB;CAG7B;AAFC;IAAC,IAAA,0BAAQ,GAAE;;+CACE;AAFf,8CAGC;AAED,MAAa,oBAAoB;CAoBhC;AAjBC;IAAC,IAAA,0BAAQ,GAAE;;kDACH;AACR;IAAC,IAAA,wBAAI,EAAC,GAAG,EAAE,CAAC,aAAa,CAAC;IACzB,IAAA,gCAAc,GAAE;;qDACN;AACX;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,uBAAK,GAAE;;wDACY;AACpB;IAAC,IAAA,wBAAI,EAAC,GAAG,EAAE,CAAC,iBAAiB,CAAC;IAC7B,IAAA,gCAAc,EAAC,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC;8BACrB,GAAG;oDAAyC;AACpD;IAAC,IAAA,wBAAI,EAAC,GAAG,EAAE,CAAC,iBAAiB,CAAC;IAC7B,IAAA,0BAAQ,GAAE;;uDACc;AACzB;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,0BAAQ,GAAE;;oDACA;AAnBb,oDAoBC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {RegisteredTypes, RegistryTypes, OverrideModuleType, OverrideBundleType} from '@polkadot/types/types';\n\nimport {BaseMapping, FileReference} from '@subql/common';\nimport {\n  CustomDataSourceAsset as SubstrateCustomDataSourceAsset,\n  SubstrateBlockFilter,\n  SubstrateBlockHandler,\n  SubstrateCallFilter,\n  SubstrateCallHandler,\n  SubstrateCustomHandler,\n  SubstrateDatasourceKind,\n  SubstrateEventFilter,\n  SubstrateEventHandler,\n  SubstrateHandlerKind,\n  SubstrateNetworkFilter,\n  SubstrateRuntimeDatasource,\n  SubstrateRuntimeHandler,\n  SubstrateRuntimeHandlerFilter,\n  SubstrateCustomDatasource,\n} from '@subql/types';\nimport {plainToClass, Transform, Type} from 'class-transformer';\nimport {\n  ArrayMaxSize,\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsInt,\n  IsOptional,\n  IsString,\n  IsObject,\n  ValidateNested,\n} from 'class-validator';\n\nexport class BlockFilter implements SubstrateBlockFilter {\n  @IsOptional()\n  @IsArray()\n  @ArrayMaxSize(2)\n  specVersion?: [number, number];\n  @IsOptional()\n  @IsInt()\n  modulo?: number;\n  @IsOptional()\n  @IsString()\n  timestamp?: string;\n}\n\nexport class EventFilter extends BlockFilter implements SubstrateEventFilter {\n  @IsOptional()\n  @IsString()\n  module?: string;\n  @IsOptional()\n  @IsString()\n  method?: string;\n}\n\nexport class ChainTypes implements RegisteredTypes {\n  @IsObject()\n  @IsOptional()\n  types?: RegistryTypes;\n  @IsObject()\n  @IsOptional()\n  typesAlias?: Record<string, OverrideModuleType>;\n  @IsObject()\n  @IsOptional()\n  typesBundle?: OverrideBundleType;\n  @IsObject()\n  @IsOptional()\n  typesChain?: Record<string, RegistryTypes>;\n  @IsObject()\n  @IsOptional()\n  typesSpec?: Record<string, RegistryTypes>;\n}\n\nexport class CallFilter extends EventFilter implements SubstrateCallFilter {\n  @IsOptional()\n  @IsBoolean()\n  success?: boolean;\n}\n\nexport class BlockHandler implements SubstrateBlockHandler {\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => BlockFilter)\n  filter?: SubstrateBlockFilter;\n  @IsEnum(SubstrateHandlerKind, {groups: [SubstrateHandlerKind.Block]})\n  kind: SubstrateHandlerKind.Block;\n  @IsString()\n  handler: string;\n}\n\nexport class CallHandler implements SubstrateCallHandler {\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => CallFilter)\n  filter?: SubstrateCallFilter;\n  @IsEnum(SubstrateHandlerKind, {groups: [SubstrateHandlerKind.Call]})\n  kind: SubstrateHandlerKind.Call;\n  @IsString()\n  handler: string;\n}\n\nexport class EventHandler implements SubstrateEventHandler {\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => EventFilter)\n  filter?: SubstrateEventFilter;\n  @IsEnum(SubstrateHandlerKind, {groups: [SubstrateHandlerKind.Event]})\n  kind: SubstrateHandlerKind.Event;\n  @IsString()\n  handler: string;\n}\n\nexport class CustomHandler implements SubstrateCustomHandler {\n  @IsString()\n  kind: string;\n  @IsString()\n  handler: string;\n  @IsObject()\n  @IsOptional()\n  filter?: Record<string, unknown>;\n}\n\nexport class RuntimeMapping implements BaseMapping<SubstrateRuntimeHandlerFilter, SubstrateRuntimeHandler> {\n  @Transform((params) => {\n    const handlers: SubstrateRuntimeHandler[] = params.value;\n    return handlers.map((handler) => {\n      switch (handler.kind) {\n        case SubstrateHandlerKind.Event:\n          return plainToClass(EventHandler, handler);\n        case SubstrateHandlerKind.Call:\n          return plainToClass(CallHandler, handler);\n        case SubstrateHandlerKind.Block:\n          return plainToClass(BlockHandler, handler);\n        default:\n          throw new Error(`handler ${(handler as any).kind} not supported`);\n      }\n    });\n  })\n  @IsArray()\n  @ValidateNested()\n  handlers: SubstrateRuntimeHandler[];\n  @IsString()\n  file: string;\n}\n\nexport class CustomMapping implements BaseMapping<Record<string, unknown>, SubstrateCustomHandler> {\n  @IsArray()\n  @Type(() => CustomHandler)\n  @ValidateNested()\n  handlers: CustomHandler[];\n  @IsString()\n  file: string;\n}\n\nexport class SubqlNetworkFilterImpl implements SubstrateNetworkFilter {\n  @IsString()\n  @IsOptional()\n  specName?: string;\n}\n\nexport class RuntimeDataSourceBase implements SubstrateRuntimeDatasource {\n  @IsEnum(SubstrateDatasourceKind, {groups: [SubstrateDatasourceKind.Runtime]})\n  kind: SubstrateDatasourceKind.Runtime;\n  @Type(() => RuntimeMapping)\n  @ValidateNested()\n  mapping: RuntimeMapping;\n  @IsOptional()\n  @IsInt()\n  startBlock?: number;\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => SubqlNetworkFilterImpl)\n  filter?: SubstrateNetworkFilter;\n}\n\nexport class FileReferenceImpl implements FileReference {\n  @IsString()\n  file: string;\n}\n\nexport class CustomDataSourceBase<K extends string, T extends SubstrateNetworkFilter, M extends CustomMapping, O = any>\n  implements SubstrateCustomDatasource<K, T, M, O>\n{\n  @IsString()\n  kind: K;\n  @Type(() => CustomMapping)\n  @ValidateNested()\n  mapping: M;\n  @IsOptional()\n  @IsInt()\n  startBlock?: number;\n  @Type(() => FileReferenceImpl)\n  @ValidateNested({each: true})\n  assets: Map<string, SubstrateCustomDataSourceAsset>;\n  @Type(() => FileReferenceImpl)\n  @IsObject()\n  processor: FileReference;\n  @IsOptional()\n  @IsObject()\n  filter?: T;\n}\n"]}