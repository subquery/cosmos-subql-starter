"use strict";
// Copyright 2020-2022 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const common_1 = require("@subql/common");
const class_validator_1 = require("class-validator");
const v1_0_0_1 = require("../project/versioned/v1_0_0");
const load_1 = require("./load");
const projectsDir = path_1.default.join(__dirname, '../../test');
describe('project.yaml', () => {
    it('can parse project.yaml to ProjectManifestImpl', () => {
        expect((0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project.yaml'))).toBeTruthy();
    });
    it('can validate project.yaml', () => {
        expect(() => (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_falsy.yaml'))).toThrow();
        expect(() => (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_falsy_array.yaml'))).toThrow();
    });
    it('can validate a v0.2.0 project.yaml', () => {
        expect(() => (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_0.2.0.yaml'))).not.toThrow();
    });
    it('can fail validation if version not supported', () => {
        expect(() => (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_invalid_version.yaml'))).toThrow();
    });
    it('can validate a v0.2.0 project.yaml with a custom data source', () => {
        expect(() => (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_0.2.0_custom_ds.yaml'))).not.toThrow();
    });
    it('can validate a v0.2.1 project.yaml with templates', () => {
        expect(() => (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_0.2.1.yaml'))).not.toThrow();
    });
    it('can validate a v1.0.0 project.yaml with templates', () => {
        expect(() => (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_1.0.0.yaml'))).not.toThrow();
    });
    it('can convert genesis hash in v1.0.0 to chainId in deployment', () => {
        const deployment = (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_1.0.0.yaml')).asV1_0_0.deployment;
        expect(deployment.network.chainId).not.toBeNull();
        console.log(deployment.network.chainId);
    });
    it('can get chainId for deployment', () => {
        const deployment = (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_1.0.0_chainId.yaml')).asV1_0_0
            .deployment;
        expect(deployment.network.chainId).toBe('moonbeamChainId');
    });
    it('can validate deployment runner versions', () => {
        const deployment = new v1_0_0_1.DeploymentV1_0_0();
        const nodeImp = new v1_0_0_1.SubstrateRunnerNodeImpl();
        const queryImp = new common_1.RunnerQueryBaseModel();
        deployment.specVersion = '1.0.0';
        deployment.runner = new v1_0_0_1.SubstrateRunnerSpecsImpl();
        nodeImp.name = '@subql/node';
        nodeImp.version = '0.29.1';
        deployment.runner.node = nodeImp;
        queryImp.name = '@subql/query';
        queryImp.version = '0.213.1';
        deployment.runner.query = queryImp;
        (0, class_validator_1.validateSync)(deployment.runner, { whitelist: true, forbidNonWhitelisted: true });
    });
    it('can validate bypass blocks', () => {
        const deployment = (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_bypass.yaml')).asV1_0_0.deployment;
        const range_deployment = (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_bypass_range.yaml')).asV1_0_0
            .deployment;
        expect(deployment.network.bypassBlocks).not.toBeNull();
        expect(range_deployment.network.bypassBlocks).not.toBeNull();
        expect(() => (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_bypass.yaml'))).not.toThrow();
        expect(() => (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_bypass_range.yaml'))).not.toThrow();
    });
    it('can validate a v1.0.0 project.yaml with unsupported runner node', () => {
        expect(() => (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_1.0.0_bad_runner.yaml'))).toThrow();
    });
    it('can throw error with unsupported runner version', () => {
        expect(() => (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_1.0.0_bad_runner_version.yaml'))).toThrow();
    });
    it('can validate a v1.0.0 project.yaml runner and datasource mismatches', () => {
        expect(() => (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_1.0.0_runner_ds_mismatch.yaml'))).toThrow();
    });
    it('can fail validation if custom ds missing processor', () => {
        expect(() => (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_0.2.0_invalid_custom_ds.yaml'))).toThrow();
    });
    it('can convert project with assets to deployment', () => {
        const manifest = (0, load_1.loadSubstrateProjectManifest)(path_1.default.join(projectsDir, 'project_1.0.0.yaml'));
        expect(manifest.isV1_0_0).toBeTruthy();
        expect(() => manifest.toDeployment()).not.toThrow();
    });
    it('validate versions', () => {
        const checkVersion = new common_1.SemverVersionValidator();
        // Versions
        expect(checkVersion.validate('*')).toBeTruthy();
        expect(checkVersion.validate('0.0.0')).toBeTruthy();
        expect(checkVersion.validate('0.1.0')).toBeTruthy();
        expect(checkVersion.validate('1.2.0')).toBeTruthy();
        expect(checkVersion.validate('^0.0.0')).toBeTruthy();
        expect(checkVersion.validate('>=0.1.0')).toBeTruthy();
        expect(checkVersion.validate('<0.1.1-1')).toBeTruthy();
        expect(checkVersion.validate('>=1.2.0')).toBeTruthy();
        expect(checkVersion.validate('~1.2.0-1')).toBeTruthy();
        expect(checkVersion.validate('>=1.2.0-abc')).toBeTruthy();
        expect(checkVersion.validate('0.1.1-1')).toBeFalsy();
        expect(checkVersion.validate('1.2.0-1')).toBeFalsy();
        expect(checkVersion.validate('1.2.0-abc')).toBeFalsy();
        expect(checkVersion.validate('~')).toBeFalsy();
        expect(checkVersion.validate('latest')).toBeFalsy();
        expect(checkVersion.validate('dev')).toBeFalsy();
    });
});
//# sourceMappingURL=project.spec.js.map