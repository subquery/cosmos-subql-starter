import type { Indexer } from 'algosdk';
import { AlgorandBlock, AlgorandTransaction } from './interfaces';
export declare enum AlgorandDataSourceKind {
    Runtime = "algorand/Runtime"
}
export declare enum AlgorandHandlerKind {
    Block = "algorand/BlockHandler",
    Transaction = "algorand/TransactionHandler"
}
export declare type RuntimeHandlerInputMap = {
    [AlgorandHandlerKind.Block]: AlgorandBlock;
    [AlgorandHandlerKind.Transaction]: AlgorandTransaction;
};
declare type RuntimeFilterMap = {
    [AlgorandHandlerKind.Block]: {};
    [AlgorandHandlerKind.Transaction]: AlgorandTransactionFilter;
};
export interface ProjectManifest {
    specVersion: string;
    description: string;
    repository: string;
    schema: string;
    network: {
        endpoint: string;
    };
    dataSources: AlgorandDataSource[];
}
export declare type SpecVersionRange = [number, number];
interface AlgorandBaseHandlerFilter {
    specVersion?: SpecVersionRange;
}
export interface AlgorandBlockFilter extends AlgorandBaseHandlerFilter {
    modulo?: number;
    timestamp?: string;
}
export interface AlgorandTransactionFilter {
    txType?: string;
    sender?: string;
    receiver?: string;
    nonParticipant?: boolean;
    assetId?: number;
    newFreezeStatus?: boolean;
    address?: string;
    applicationId?: number;
}
export declare type AlgorandBlockHandler = AlgorandCustomHandler<AlgorandHandlerKind.Block, AlgorandBlockFilter>;
export declare type AlgorandTransactionHandler = AlgorandCustomHandler<AlgorandHandlerKind.Transaction, AlgorandTransactionFilter>;
export interface AlgorandCustomHandler<K extends string = string, F = Record<string, unknown>> {
    handler: string;
    kind: K;
    filter?: F;
}
export declare type AlgorandRuntimeHandler = AlgorandBlockHandler | AlgorandTransactionHandler;
export declare type AlgorandHandler = AlgorandRuntimeHandler | AlgorandCustomHandler<string, unknown>;
export declare type AlgorandRuntimeHandlerFilter = AlgorandBlockFilter | AlgorandTransactionFilter;
export interface AlgorandMapping<T extends AlgorandHandler = AlgorandHandler> extends FileReference {
    handlers: T[];
}
interface IAlgorandDataSource<M extends AlgorandMapping> {
    name?: string;
    kind: string;
    startBlock?: number;
    mapping: M;
}
export interface AlgorandRuntimeDataSource<M extends AlgorandMapping<AlgorandRuntimeHandler> = AlgorandMapping<AlgorandRuntimeHandler>> extends IAlgorandDataSource<M> {
    kind: AlgorandDataSourceKind.Runtime;
}
export declare type AlgorandDataSource = AlgorandRuntimeDataSource | AlgorandCustomDataSource;
export interface FileReference {
    file: string;
}
export declare type CustomDataSourceAsset = FileReference;
export declare type Processor<O = any> = FileReference & {
    options?: O;
};
export interface AlgorandCustomDataSource<K extends string = string, M extends AlgorandMapping = AlgorandMapping<AlgorandCustomHandler>, O = any> extends IAlgorandDataSource<M> {
    kind: K;
    assets: Map<string, CustomDataSourceAsset>;
    processor: Processor<O>;
}
export interface HandlerInputTransformer_0_0_0<T extends AlgorandHandlerKind, E, DS extends AlgorandCustomDataSource = AlgorandCustomDataSource> {
    (input: RuntimeHandlerInputMap[T], ds: DS, api: Indexer, assets?: Record<string, string>): Promise<E>;
}
export interface HandlerInputTransformer_1_0_0<T extends AlgorandHandlerKind, F, E, DS extends AlgorandCustomDataSource = AlgorandCustomDataSource> {
    (params: {
        input: RuntimeHandlerInputMap[T];
        ds: DS;
        filter?: F;
        api: Indexer;
        assets?: Record<string, string>;
    }): Promise<E[]>;
}
declare type SecondLayerHandlerProcessorArray<K extends string, T, DS extends AlgorandCustomDataSource<K> = AlgorandCustomDataSource<K>> = SecondLayerHandlerProcessor<AlgorandHandlerKind, T, DS>;
export interface AlgorandDataSourceProcessor<K extends string, DS extends AlgorandCustomDataSource<K> = AlgorandCustomDataSource<K>, P extends Record<string, SecondLayerHandlerProcessorArray<K, any, DS>> = Record<string, SecondLayerHandlerProcessorArray<K, any, DS>>> {
    kind: K;
    validate(ds: DS, assets: Record<string, string>): void;
    dsFilterProcessor(ds: DS, api: Indexer): boolean;
    handlerProcessors: P;
}
export interface DictionaryQueryCondition {
    field: string;
    value: string;
    matcher?: string;
}
export interface DictionaryQueryEntry {
    entity: string;
    conditions: DictionaryQueryCondition[];
}
interface SecondLayerHandlerProcessorBase<K extends AlgorandHandlerKind, F, DS extends AlgorandCustomDataSource = AlgorandCustomDataSource> {
    baseHandlerKind: K;
    baseFilter: RuntimeFilterMap[K] | RuntimeFilterMap[K][];
    filterValidator: (filter?: F) => void;
    dictionaryQuery?: (filter: F, ds: DS) => DictionaryQueryEntry | undefined;
}
export interface SecondLayerHandlerProcessor_0_0_0<K extends AlgorandHandlerKind, F, E, DS extends AlgorandCustomDataSource = AlgorandCustomDataSource> extends SecondLayerHandlerProcessorBase<K, F, DS> {
    specVersion: undefined;
    transformer: HandlerInputTransformer_0_0_0<K, E, DS>;
    filterProcessor: (filter: F | undefined, input: RuntimeHandlerInputMap[K], ds: DS) => boolean;
}
export interface SecondLayerHandlerProcessor_1_0_0<K extends AlgorandHandlerKind, F, E, DS extends AlgorandCustomDataSource = AlgorandCustomDataSource> extends SecondLayerHandlerProcessorBase<K, F, DS> {
    specVersion: '1.0.0';
    transformer: HandlerInputTransformer_1_0_0<K, F, E, DS>;
    filterProcessor: (params: {
        filter: F | undefined;
        input: RuntimeHandlerInputMap[K];
        ds: DS;
    }) => boolean;
}
export declare type SecondLayerHandlerProcessor<K extends AlgorandHandlerKind, F, E, DS extends AlgorandCustomDataSource = AlgorandCustomDataSource> = SecondLayerHandlerProcessor_0_0_0<K, F, E, DS> | SecondLayerHandlerProcessor_1_0_0<K, F, E, DS>;
export {};
