{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n// import {ApiPromise} from '@polkadot/api';\n// import {ApiDecoration} from '@polkadot/api/types';\nimport {Block} from '@ethersproject/abstract-provider';\nimport {\n  EthereumBlock,\n  EthereumBlockWrapper,\n  EthereumLog,\n  EthereumLogFilter,\n  EthereumTransaction,\n  EthereumTransactionFilter,\n} from './ethereum';\n\nexport interface Entity {\n  id: string;\n}\n\n// export type ApiAt = ApiDecoration<'promise'> & {rpc: ApiPromise['rpc']};\n\nexport type FunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends Function ? K : never;\n}[keyof T];\n\nexport interface Store {\n  get(entity: string, id: string): Promise<Entity | null>;\n  getByField(entity: string, field: string, value): Promise<Entity[]>;\n  getOneByField(entity: string, field: string, value): Promise<Entity | null>;\n  set(entity: string, id: string, data: Entity): Promise<void>;\n  bulkCreate(entity: string, data: Entity[]): Promise<void>;\n  remove(entity: string, id: string): Promise<void>;\n}\n\nexport interface BlockWrapper<\n  B extends EthereumBlock = EthereumBlock,\n  C extends EthereumTransaction = EthereumTransaction,\n  E extends EthereumLog = EthereumLog,\n  CF extends EthereumTransactionFilter = EthereumTransactionFilter,\n  EF extends EthereumLogFilter = EthereumLogFilter\n> {\n  block: B;\n  blockHeight: number;\n  specVersion?: number;\n  hash: string;\n  calls?: (filters?: CF | CF[], ds?: any) => C[];\n  transactions?: C[];\n  events?: (filters?: EF | EF[], ds?: any) => E[];\n  logs?: E[];\n}\n\nexport interface ApiWrapper<BW extends BlockWrapper = EthereumBlockWrapper> {\n  init: () => Promise<void>;\n  getGenesisHash: () => string;\n  getRuntimeChain: () => string;\n  getSpecName: () => string;\n  getFinalizedBlockHeight: () => Promise<number>;\n  getLastHeight: () => Promise<number>;\n  fetchBlocks: (bufferBlocks: number[]) => Promise<BW[]>;\n  freezeApi: (processor: any, blockContent?: BlockWrapper) => void;\n}\n\nexport type DynamicDatasourceCreator = (name: string, args: Record<string, unknown>) => Promise<void>;\n"]}